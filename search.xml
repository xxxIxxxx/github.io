<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>RxSwift-创建可观察序列</title>
    <url>/2020/12/17/1--RxSwift-%E5%88%9B%E5%BB%BA%E5%8F%AF%E8%A7%82%E5%AF%9F%E5%BA%8F%E5%88%97/</url>
    <content><![CDATA[<h3 id="empty-方法初始化"><a href="#empty-方法初始化" class="headerlink" title="empty() 方法初始化"></a>empty() 方法初始化</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 创建了一个空内容的 Observable</span><br><span class="line">let ob &#x3D; Observable&lt;Int&gt;.empty()</span><br><span class="line">&#x2F;&#x2F; 先简单的写一种订阅的方法</span><br><span class="line">ob.subscribe &#123; print(&quot;执行了&quot;) &#125;</span><br></pre></td></tr></table></figure>

<h3 id="just-方法-传入默认值初始化"><a href="#just-方法-传入默认值初始化" class="headerlink" title="just() 方法 传入默认值初始化"></a>just() 方法 传入默认值初始化</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 这里不用给定泛型，会根据 just 自动推倒出</span><br><span class="line">let ob &#x3D; Observable.just(&quot;初始化默认值&quot;)</span><br></pre></td></tr></table></figure>

<h3 id="of-方法-传入可变数量的值，但必须是同一类型"><a href="#of-方法-传入可变数量的值，但必须是同一类型" class="headerlink" title="of() 方法 传入可变数量的值，但必须是同一类型"></a>of() 方法 传入可变数量的值，但必须是同一类型</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">let ob &#x3D; Observable.of(&quot;可&quot;, &quot;变&quot;, &quot;数&quot;, &quot;量&quot;)</span><br></pre></td></tr></table></figure>

<h3 id="from-传入数组初始化"><a href="#from-传入数组初始化" class="headerlink" title="from() 传入数组初始化"></a>from() 传入数组初始化</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">let ob &#x3D; Observable.from([&quot;数&quot;, &quot;组&quot;])</span><br></pre></td></tr></table></figure>

<h3 id="never-永远不会发出-event-的-Observable-序列"><a href="#never-永远不会发出-event-的-Observable-序列" class="headerlink" title="never() 永远不会发出 event 的 Observable 序列"></a>never() 永远不会发出 event 的 Observable 序列</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">let ob &#x3D; Observable&lt;Any&gt;.never()</span><br></pre></td></tr></table></figure>

<h3 id="error-直接发送一个错误"><a href="#error-直接发送一个错误" class="headerlink" title="error() 直接发送一个错误"></a>error() 直接发送一个错误</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">enum OBError: Error &#123;</span><br><span class="line">    case abc</span><br><span class="line">&#125;</span><br><span class="line">let ob &#x3D; Observable&lt;OBError&gt;.error(OBError.abc)</span><br></pre></td></tr></table></figure>

<h3 id="interval-每一秒发送一次"><a href="#interval-每一秒发送一次" class="headerlink" title="interval() 每一秒发送一次"></a>interval() 每一秒发送一次</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">let ob &#x3D; Observable&lt;Int&gt;.interval(1, scheduler: MainScheduler.asyncInstance)</span><br></pre></td></tr></table></figure>

<h3 id="timer-定时发送"><a href="#timer-定时发送" class="headerlink" title="timer() 定时发送"></a>timer() 定时发送</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 3 秒后，仅发送一次</span><br><span class="line">let ob &#x3D; Observable&lt;Int&gt;.timer(3, scheduler: MainScheduler.instance)</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 3 秒后，每 2 秒发送一次</span><br><span class="line">let ob &#x3D; Observable&lt;Int&gt;.timer(3, period: 2, scheduler: MainScheduler.asyncInstance)</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Swift</category>
      </categories>
      <tags>
        <tag>RxSwift</tag>
      </tags>
  </entry>
  <entry>
    <title>RxSwift-延迟、超时、delay、timeout</title>
    <url>/2020/12/17/10--RxSwift-%E5%BB%B6%E8%BF%9F%E3%80%81%E8%B6%85%E6%97%B6%E3%80%81delay%E3%80%81timeout/</url>
    <content><![CDATA[<h1 id="delay"><a href="#delay" class="headerlink" title="delay"></a>delay</h1><p>对所有发送事件(包括<code>onCompleted</code>)后延迟 n 秒接收</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">let ob &#x3D; PublishSubject&lt;String&gt;()</span><br><span class="line">ob.delay(RxTimeInterval.seconds(2), scheduler: MainScheduler.asyncInstance).subscribe &#123; event in</span><br><span class="line">    print(event)</span><br><span class="line">&#125;.disposed(by: disposeBag)</span><br><span class="line">ob.onNext(&quot;发送了&quot;)</span><br></pre></td></tr></table></figure>

<h1 id="timeout"><a href="#timeout" class="headerlink" title="timeout"></a>timeout</h1><p> 设置超时时间，超过规定时间的事件将发送  <code>error</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">let ob &#x3D; PublishSubject&lt;String&gt;()</span><br><span class="line">ob.timeout(RxTimeInterval.seconds(3), scheduler: MainScheduler.instance).subscribe &#123; event in</span><br><span class="line">    print(event)</span><br><span class="line">&#125;.disposed(by: disposeBag)</span><br><span class="line">ob.onNext(&quot;发送1&quot;)</span><br><span class="line">DispatchQueue.global().asyncAfter(deadline: .now() + 4) &#123;</span><br><span class="line">    ob.onNext(&quot;超时发送&quot;)</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;next(发送1)</span><br><span class="line">&#x2F;&#x2F;error(Sequence timeout.)</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Swift</category>
      </categories>
      <tags>
        <tag>RxSwift</tag>
      </tags>
  </entry>
  <entry>
    <title>RxSwift-错误处理、重试-catchError、retry</title>
    <url>/2020/12/17/11--RxSwift-%E9%94%99%E8%AF%AF%E5%A4%84%E7%90%86%E3%80%81%E9%87%8D%E8%AF%95-catchError%E3%80%81retry/</url>
    <content><![CDATA[<h1 id="catchError"><a href="#catchError" class="headerlink" title="catchError"></a>catchError</h1><p>当发送了<code>error</code>事件后可以返回一个新的序列</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">enum ObError: Error &#123;</span><br><span class="line">    case error1</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">let ob1 &#x3D; PublishSubject&lt;String&gt;()</span><br><span class="line">let ob2 &#x3D; PublishSubject.of(&quot;A&quot;, &quot;B&quot;)</span><br><span class="line"></span><br><span class="line">ob1.catchError &#123; (error) -&gt; Observable&lt;String&gt; in</span><br><span class="line">    print(error)</span><br><span class="line">    return ob2</span><br><span class="line">&#125;.subscribe &#123; event in</span><br><span class="line">    print(event)</span><br><span class="line">&#125;.disposed(by: disposeBag)</span><br><span class="line">ob1.onNext(&quot;111&quot;)</span><br><span class="line">ob1.onError(ObError.error1)</span><br><span class="line">&#x2F;&#x2F;next(111)</span><br><span class="line">&#x2F;&#x2F;error1</span><br><span class="line">&#x2F;&#x2F;next(A)</span><br><span class="line">&#x2F;&#x2F;next(B)</span><br><span class="line">&#x2F;&#x2F;completed</span><br></pre></td></tr></table></figure>
<h1 id="retry"><a href="#retry" class="headerlink" title="retry"></a>retry</h1><p>当发送了<code>error</code>后可以重新发送</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var isFail &#x3D; true</span><br><span class="line">let obs &#x3D; Observable&lt;String&gt;.create &#123; (ob) -&gt; Disposable in</span><br><span class="line">    ob.onNext(&quot;成功1&quot;)</span><br><span class="line">    if isFail &#123;</span><br><span class="line">        ob.onError(ObError.error1)</span><br><span class="line">        isFail &#x3D; false</span><br><span class="line">    &#125;</span><br><span class="line">    ob.onNext(&quot;重试成功&quot;)</span><br><span class="line">    ob.onCompleted()</span><br><span class="line">    return Disposables.create()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">obs.retry(2).subscribe &#123; event in</span><br><span class="line">    print(event)</span><br><span class="line">&#125;.disposed(by: disposeBag)</span><br><span class="line"></span><br><span class="line">next(成功1)</span><br><span class="line">next(成功1)</span><br><span class="line">next(重试成功)</span><br><span class="line">completed</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Swift</category>
      </categories>
      <tags>
        <tag>RxSwift</tag>
      </tags>
  </entry>
  <entry>
    <title>RxSwift-Single、Completab、Maybe</title>
    <url>/2020/12/17/12--RxSwift-Single%E3%80%81Completab%E3%80%81Maybe/</url>
    <content><![CDATA[<h1 id="Single"><a href="#Single" class="headerlink" title="Single"></a>Single</h1><p>只发出一次事件，常用于网络请求</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">enum DataError: Error &#123;</span><br><span class="line">    case error1</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func getData() -&gt; Single&lt;[String: Any]&gt; &#123;</span><br><span class="line">    return Single&lt;[String: Any]&gt;.create &#123; (single) -&gt; Disposable in</span><br><span class="line">        single(.success([&quot;&quot;: 1]))</span><br><span class="line">&#x2F;&#x2F;                single(.error(DataError.error1))</span><br><span class="line">        return Disposables.create &#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">getData().subscribe &#123; req in</span><br><span class="line">    switch req &#123;</span><br><span class="line">    case .success(let value):</span><br><span class="line">        print(value)</span><br><span class="line">    case .error(let error):</span><br><span class="line">        print(error)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;.disposed(by: disposeBag)</span><br></pre></td></tr></table></figure>

<h1 id="Completable"><a href="#Completable" class="headerlink" title="Completable"></a>Completable</h1><p>只会发出<code>completed</code>或<code>error</code> 事件，用于只关心操作结果</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">func cancel() -&gt; Completable &#123;</span><br><span class="line">    return Completable.create &#123; (comp) -&gt; Disposable in</span><br><span class="line">        comp(.completed)</span><br><span class="line">&#x2F;&#x2F;                comp(.error(ObError.error1))</span><br><span class="line">        return Disposables.create &#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">cancel().subscribe &#123; rep in</span><br><span class="line">    switch rep &#123;</span><br><span class="line">    case .completed:</span><br><span class="line">        print(&quot;成功&quot;)</span><br><span class="line">    case let .error(error):</span><br><span class="line">        print(error)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;.disposed(by: disposeBag)</span><br></pre></td></tr></table></figure>

<h1 id="Maybe"><a href="#Maybe" class="headerlink" title="Maybe"></a>Maybe</h1><p>也是只能发出一个事件，正常的<code>event</code>或<code>completed </code>或<code>error</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">func test() -&gt; Maybe&lt;String&gt; &#123;</span><br><span class="line">    return Maybe&lt;String&gt;.create &#123; (mayBe) -&gt; Disposable in</span><br><span class="line">        mayBe(.success(&quot;成功&quot;))</span><br><span class="line">&#x2F;&#x2F;                mayBe(.completed)</span><br><span class="line">&#x2F;&#x2F;                mayBe(.error(ObError.error1))</span><br><span class="line">        return Disposables.create &#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">test().subscribe &#123; event in</span><br><span class="line">    switch event &#123;</span><br><span class="line">    case .success(let value):</span><br><span class="line">        print(value)</span><br><span class="line">    case .completed:</span><br><span class="line">        print(&quot;completed&quot;)</span><br><span class="line">    case .error(let error):</span><br><span class="line">        print(error)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;.disposed(by: disposeBag)</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Swift</category>
      </categories>
      <tags>
        <tag>RxSwift</tag>
      </tags>
  </entry>
  <entry>
    <title>RxSwift-Observable订阅、监听</title>
    <url>/2020/12/17/2--RxSwift-Observable%E8%AE%A2%E9%98%85%E3%80%81%E7%9B%91%E5%90%AC/</url>
    <content><![CDATA[<h3 id="订阅"><a href="#订阅" class="headerlink" title="订阅"></a>订阅</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">let ob &#x3D; Observable.of(&quot;A&quot;, &quot;B&quot;, &quot;C&quot;)</span><br><span class="line">&#x2F;&#x2F;&#x2F; 直接订阅所有的</span><br><span class="line">ob.subscribe &#123; event in</span><br><span class="line">    print(&quot;事件&quot;, event)</span><br><span class="line">&#x2F;&#x2F; 通过 event.element 可以获取值</span><br><span class="line">    print(&quot;值是&quot;, event.element)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;&#x2F;分开订阅</span><br><span class="line">ob.subscribe &#123; element in</span><br><span class="line">    print(&quot;onNext&quot;, element)</span><br><span class="line">&#125; onError: &#123; error in</span><br><span class="line">    print(&quot;onError&quot;, error)</span><br><span class="line">&#125; onCompleted: &#123;</span><br><span class="line">    print(&quot;onCompleted&quot;)</span><br><span class="line">&#125; onDisposed: &#123;</span><br><span class="line">    print(&quot;onDisposed&quot;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;&#x2F;仅订阅 onNext</span><br><span class="line">ob.subscribe(onNext: &#123; element in</span><br><span class="line">    print(element)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="监听-do"><a href="#监听-do" class="headerlink" title="监听 do"></a>监听 do</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">let ob &#x3D; Observable.of(&quot;A&quot;, &quot;B&quot;, &quot;C&quot;)</span><br><span class="line">ob.do &#123; element in</span><br><span class="line">    print(&quot;onNext&quot;, element)</span><br><span class="line">&#125; afterNext: &#123; element in</span><br><span class="line">    print(&quot;afterNext&quot;, element)</span><br><span class="line">&#125; onError: &#123; error in</span><br><span class="line">    print(&quot;onError&quot;, error)</span><br><span class="line">&#125; afterError: &#123; error in</span><br><span class="line">    print(&quot;afterError&quot;, error)</span><br><span class="line">&#125; onCompleted: &#123;</span><br><span class="line">    print(&quot;onCompleted&quot;)</span><br><span class="line">&#125; afterCompleted: &#123;</span><br><span class="line">    print(&quot;afterCompleted&quot;)</span><br><span class="line">&#125; onSubscribe: &#123;</span><br><span class="line">    print(&quot;onSubscribe&quot;)</span><br><span class="line">&#125; onSubscribed: &#123;</span><br><span class="line">    print(&quot;onSubscribed&quot;)</span><br><span class="line">&#125; onDispose: &#123;</span><br><span class="line">    print(&quot;onDispose&quot;)</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;&#x2F; 这里是订阅部分</span><br><span class="line">.subscribe &#123; element in</span><br><span class="line">    print(&quot;onNext&quot;, element)</span><br><span class="line">&#125; onError: &#123; error in</span><br><span class="line">    print(&quot;onError&quot;, error)</span><br><span class="line">&#125; onCompleted: &#123;</span><br><span class="line">    print(&quot;onCompleted&quot;)</span><br><span class="line">&#125; onDisposed: &#123;</span><br><span class="line">    print(&quot;onDisposed&quot;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Swift</category>
      </categories>
      <tags>
        <tag>RxSwift</tag>
      </tags>
  </entry>
  <entry>
    <title>RxSwift-绑定-bind、bindTo、Binder</title>
    <url>/2020/12/17/3--RxSwift-%E7%BB%91%E5%AE%9A-bind%E3%80%81bindTo%E3%80%81Binder/</url>
    <content><![CDATA[<h3 id="bind"><a href="#bind" class="headerlink" title="bind"></a>bind</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">let ob &#x3D; Observable&lt;Int&gt;.interval(1, scheduler: MainScheduler.asyncInstance)</span><br><span class="line"></span><br><span class="line">ob.map &#123;</span><br><span class="line">&#x2F;&#x2F; 对值进一步处理然后返回</span><br><span class="line">    &quot;count &quot; + &quot;\($0)&quot;</span><br><span class="line">&#125;</span><br><span class="line">.bind &#123; text in</span><br><span class="line">    countLab.text &#x3D; text</span><br><span class="line">&#125;.disposed(by: disposeBag)</span><br><span class="line"></span><br><span class="line">ob.bind &#123; x in</span><br><span class="line">    print(x)</span><br><span class="line">&#125;.disposed(by: disposeBag)</span><br></pre></td></tr></table></figure>
<h3 id="Binder-bindTo"><a href="#Binder-bindTo" class="headerlink" title="Binder + bindTo"></a>Binder + bindTo</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">let ob &#x3D; Observable&lt;Int&gt;.interval(1, scheduler: MainScheduler.asyncInstance)</span><br><span class="line">let observer: Binder&lt;String&gt; &#x3D; Binder(countLab) &#123; lab, text in</span><br><span class="line">    lab.text &#x3D; text</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ob.map &#123;</span><br><span class="line">    &quot;c&quot; + &quot;\($0)&quot;</span><br><span class="line">&#125;</span><br><span class="line">.bind(to: observer)</span><br><span class="line">.disposed(by: disposeBag)</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Swift</category>
      </categories>
      <tags>
        <tag>RxSwift</tag>
      </tags>
  </entry>
  <entry>
    <title>RxSwift-自定义可绑属性</title>
    <url>/2020/12/17/4--RxSwift-%E8%87%AA%E5%AE%9A%E4%B9%89%E5%8F%AF%E7%BB%91%E5%B1%9E%E6%80%A7/</url>
    <content><![CDATA[<h3 id="对-Reactive-进行扩展"><a href="#对-Reactive-进行扩展" class="headerlink" title="对 Reactive 进行扩展"></a>对 Reactive 进行扩展</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 给 UILabel 增加了 fontSize 可绑属性</span><br><span class="line">extension Reactive where Base: UILabel &#123;</span><br><span class="line">    public var fontSize: Binder&lt;CGFloat&gt; &#123;</span><br><span class="line">        return Binder(base) &#123; lab, size in</span><br><span class="line">            lab.font &#x3D; UIFont.systemFont(ofSize: size)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 使用</span><br><span class="line">let ob &#x3D; Observable&lt;Int&gt;.interval(1, scheduler: MainScheduler.asyncInstance)</span><br><span class="line">ob.map &#123; CGFloat($0) + 10.0 &#125;</span><br><span class="line">    .bind(to: lab.rx.fontSize) &#x2F;&#x2F; 这里要使用 .rx</span><br><span class="line">    .disposed(by: disposeBag)</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Swift</category>
      </categories>
      <tags>
        <tag>RxSwift</tag>
      </tags>
  </entry>
  <entry>
    <title>RxSwift-发送、订阅-Subjects、Variables</title>
    <url>/2020/12/17/5--RxSwift-%E5%8F%91%E9%80%81%E3%80%81%E8%AE%A2%E9%98%85-Subjects%E3%80%81Variables/</url>
    <content><![CDATA[<h1 id="Subjects-介绍"><a href="#Subjects-介绍" class="headerlink" title="Subjects 介绍"></a>Subjects 介绍</h1><h3 id="1-Subjects-是订阅者，也是Observable"><a href="#1-Subjects-是订阅者，也是Observable" class="headerlink" title="1. Subjects 是订阅者，也是Observable"></a>1. <code>Subjects</code> 是订阅者，也是<code>Observable</code></h3><ul>
<li>订阅者：它能动态的接收新的值。</li>
<li><code>Observable</code>： 当<code>Subjects</code>有了新值后会通过<code>Event</code>将新值发出给他的所有订阅者。</li>
</ul>
<hr>
<h3 id="2-常用的方法"><a href="#2-常用的方法" class="headerlink" title="2. 常用的方法"></a>2. 常用的方法</h3><p><code>onNext(:)：</code>是<code> on(.next(:))</code> 的简便写法。该方法相当于 <code>subject</code> 接收到一个<code>.next</code> 事件。<br><code>onError(:)：</code>是<code>on(.error(:))</code>的简便写法。该方法相当于 <code>subject</code> 接收到一个<code> .error</code> 事件。<br><code>onCompleted()：</code>是 <code>on(.completed)</code>的简便写法。该方法相当于 <code>subject</code> 接收到一个 <code>.completed</code>事件。</p>
<hr>
<h3 id="3-Subjects-有四种PublishSubject、BehaviorSubject、ReplaySubject、Variable"><a href="#3-Subjects-有四种PublishSubject、BehaviorSubject、ReplaySubject、Variable" class="headerlink" title="3. Subjects 有四种PublishSubject、BehaviorSubject、ReplaySubject、Variable"></a>3. <code>Subjects</code> 有四种<code>PublishSubject</code>、<code>BehaviorSubject</code>、<code>ReplaySubject</code>、<code>Variable</code></h3><h5 id="相同点"><a href="#相同点" class="headerlink" title="相同点"></a>相同点</h5><ul>
<li>都是<code>Observable</code>，他们的订阅者都能接收他们发出的新的<code>Event</code></li>
<li>直到 <code>Subject</code> 发出 <code>.complete</code> 或者 <code>.error</code> 的 <code>Event</code> 后，该 <code>Subject</code> 便终结了，同时它也就不会再发出<code>.next</code>事件。</li>
<li>对于那些在<code> Subject</code> 终结后再订阅他的订阅者，也能收到 <code>subject</code>发出的一条<code> .complete</code> 或<code> .error</code>的<code> event</code>，告诉这个新的订阅者它已经终结了。<h5 id="不同点"><a href="#不同点" class="headerlink" title="不同点"></a>不同点</h5></li>
<li> <code>PublishSubject</code><br>最普通的<code>Subject</code>，不需要初始值就能初始化。<br>他的订阅者只能收到他们订阅后的 <code>Event</code>。<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">let sub &#x3D; PublishSubject&lt;String&gt;()</span><br><span class="line"></span><br><span class="line">sub.onNext(&quot;订阅之前的不能接收到&quot;)</span><br><span class="line"></span><br><span class="line">sub.subscribe &#123; event in</span><br><span class="line">    print(event.element)</span><br><span class="line">&#x2F;&#x2F;Optional(&quot;订阅之后的可以接收到&quot;)</span><br><span class="line">&#x2F;&#x2F;nil</span><br><span class="line">&#125;.disposed(by: disposeBag)</span><br><span class="line"></span><br><span class="line">sub.onNext(&quot;订阅之后的可以接收到&quot;)</span><br><span class="line">&#x2F;&#x2F;结束</span><br><span class="line">sub.onCompleted()</span><br><span class="line">&#x2F;&#x2F;&#x2F; 结束之后添加的订阅能收到 completed</span><br><span class="line">sub.subscribe &#123; event in</span><br><span class="line">    print(event)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">sub.onNext(&quot;结束后发的都收不到&quot;)</span><br></pre></td></tr></table></figure></li>
<li><code>BehaviorSubject</code><br>需要一个默认值初始化<br>当一个订阅者订阅之后会立马收到上一个<code>Event</code>，之后就是正常情况发一个收一个。<br><code>onCompleted()</code>之后的订阅者也只能收到<code>Completed</code>。<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">let sub &#x3D; BehaviorSubject(value: &quot;默认值&quot;)</span><br><span class="line"></span><br><span class="line">sub.subscribe &#123; event in</span><br><span class="line">    print(&quot;订阅1&quot;, event)</span><br><span class="line">&#125;.disposed(by: disposeBag)</span><br><span class="line">sub.onNext(&quot;发送1&quot;)</span><br><span class="line">sub.subscribe &#123; event in</span><br><span class="line">    print(&quot;订阅2&quot;, event)</span><br><span class="line">&#125;.disposed(by: disposeBag)</span><br><span class="line">sub.onCompleted()</span><br><span class="line">sub.subscribe &#123; event in</span><br><span class="line">    print(&quot;订阅3&quot;, event)</span><br><span class="line">&#125;.disposed(by: disposeBag)</span><br><span class="line"></span><br><span class="line">订阅1 next(默认值)</span><br><span class="line">订阅1 next(发送1)</span><br><span class="line">订阅2 next(发送1)</span><br><span class="line">订阅1 completed</span><br><span class="line">订阅2 completed</span><br><span class="line">订阅3 completed</span><br></pre></td></tr></table></figure></li>
<li><code>ReplaySubject</code><br>创建的时候需要一个参数<code>bufferSize</code>设置记录个数<br>新添加的订阅会接收到之前发送的两个  <code>Event</code>，如果不足两个就只接收一个。<br>如果超过两个只接收最新的两个。<br>如果订阅时已经结束除了会接收到最新的两个<code>Event</code>外还有结束的<code>complete </code>或<code>error </code>。</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">let sub &#x3D; ReplaySubject&lt;String&gt;.create(bufferSize: 2)</span><br><span class="line"></span><br><span class="line">sub.subscribe &#123; event in</span><br><span class="line">    print(&quot;订阅1&quot;, event)</span><br><span class="line">&#125;.disposed(by: disposeBag)</span><br><span class="line">sub.onNext(&quot;发送1&quot;)</span><br><span class="line">print(&quot;-------&quot;)</span><br><span class="line">sub.subscribe &#123; event in</span><br><span class="line">    print(&quot;订阅2&quot;, event)</span><br><span class="line">&#125;.disposed(by: disposeBag)</span><br><span class="line"></span><br><span class="line">sub.onNext(&quot;发送2&quot;)</span><br><span class="line">sub.onNext(&quot;发送3&quot;)</span><br><span class="line">sub.onNext(&quot;发送4&quot;)</span><br><span class="line">print(&quot;-------&quot;)</span><br><span class="line">sub.subscribe &#123; event in</span><br><span class="line">    print(&quot;订阅3&quot;, event)</span><br><span class="line">&#125;.disposed(by: disposeBag)</span><br><span class="line">sub.onCompleted()</span><br><span class="line">print(&quot;-------&quot;)</span><br><span class="line">&#x2F;&#x2F;&#x2F; 不仅会收到最后的两个 event 还有 Completed</span><br><span class="line">sub.subscribe &#123; event in</span><br><span class="line">    print(&quot;订阅4&quot;, event)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">订阅1 next(发送1)</span><br><span class="line">-------</span><br><span class="line">订阅2 next(发送1)</span><br><span class="line">订阅1 next(发送2)</span><br><span class="line">订阅2 next(发送2)</span><br><span class="line">订阅1 next(发送3)</span><br><span class="line">订阅2 next(发送3)</span><br><span class="line">订阅1 next(发送4)</span><br><span class="line">订阅2 next(发送4)</span><br><span class="line">-------</span><br><span class="line">订阅3 next(发送3)</span><br><span class="line">订阅3 next(发送4)</span><br><span class="line">订阅1 completed</span><br><span class="line">订阅2 completed</span><br><span class="line">订阅3 completed</span><br><span class="line">-------</span><br><span class="line">订阅4 next(发送3)</span><br><span class="line">订阅4 next(发送4)</span><br><span class="line">订阅4 completed</span><br></pre></td></tr></table></figure>
<ul>
<li><code>BehaviorRelay </code><br>基本同 <code>BehaviorSubject </code>功能一样，但是不能主动调用<code>onCompleted</code>和<code>error </code>，会在<code>BehaviorRelay </code>释放前调用<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">let sub &#x3D; BehaviorRelay(value: &quot;初始值&quot;)</span><br><span class="line"></span><br><span class="line">sub.subscribe &#123; event in</span><br><span class="line">    print(&quot;第一次订阅&quot;, event)</span><br><span class="line">&#125;.disposed(by: disposeBag)</span><br><span class="line">sub.accept(&quot;新值1&quot;)</span><br><span class="line">sub.subscribe &#123; event in</span><br><span class="line">    print(&quot;第二次订阅&quot;, event)</span><br><span class="line">&#125;.disposed(by: disposeBag)</span><br></pre></td></tr></table></figure>









</li>
</ul>
]]></content>
      <categories>
        <category>Swift</category>
      </categories>
      <tags>
        <tag>RxSwift</tag>
      </tags>
  </entry>
  <entry>
    <title>RxSwift-订阅操作过滤1-map、buffer、filter</title>
    <url>/2020/12/17/6--RxSwift-%E8%AE%A2%E9%98%85%E6%93%8D%E4%BD%9C%E8%BF%87%E6%BB%A41-map%E3%80%81buffer%E3%80%81filter/</url>
    <content><![CDATA[<h1 id="map"><a href="#map" class="headerlink" title="map"></a>map</h1><p>同 <code>Swift</code>中 <code>map</code> 用法一样，对值进行处理并返回</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">let sub &#x3D; PublishSubject&lt;String&gt;()</span><br><span class="line"></span><br><span class="line">sub.map &#123; $0 + &quot;mmmmm&quot; &#125;</span><br><span class="line">    .subscribe &#123; event in</span><br><span class="line">        print(event.element)</span><br><span class="line">    &#125;</span><br><span class="line">    .disposed(by: disposeBag)</span><br><span class="line">sub.onNext(&quot;a&quot;)</span><br><span class="line">&#x2F;&#x2F;Optional(&quot;ammmmm&quot;)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h1 id="buffer"><a href="#buffer" class="headerlink" title="buffer"></a>buffer</h1><p><code>timeSpan </code> 缓存间隔时间、              <code>count </code>缓存个数 、  <code>scheduler </code>线程<br>发送两个<code>event</code>后会触发订阅。满 2 秒也会触发订阅 ，如果<code>event</code> 没有发送空数组</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">let sub &#x3D; PublishSubject&lt;String&gt;()</span><br><span class="line">sub.buffer(timeSpan: 2, count: 2, scheduler: MainScheduler.asyncInstance)</span><br><span class="line">    .subscribe &#123; event in</span><br><span class="line">        print(&quot;订阅1&quot;, event)</span><br><span class="line">    &#125;.disposed(by: disposeBag)</span><br><span class="line"></span><br><span class="line">sub.onNext(&quot;发送1&quot;)</span><br><span class="line">sub.onNext(&quot;发送2&quot;)</span><br></pre></td></tr></table></figure>

<h1 id="filter"><a href="#filter" class="headerlink" title="filter"></a>filter</h1><p>过滤 同<code>Swift</code>中<code>filter</code>一样</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">let ob &#x3D; Observable.of(10, 11, 12, 99, 33, 55, 77)</span><br><span class="line">ob.filter &#123; $0 &gt; 20</span><br><span class="line">&#125;.subscribe(onNext: &#123; element in</span><br><span class="line">    print(element)</span><br><span class="line">&#125;).disposed(by: disposeBag)</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Swift</category>
      </categories>
      <tags>
        <tag>RxSwift</tag>
      </tags>
  </entry>
  <entry>
    <title>RxSwift-订阅操作过滤2-distinctUntilChanged、single、elementAt、ignoreElement</title>
    <url>/2020/12/17/7--RxSwift-%E8%AE%A2%E9%98%85%E6%93%8D%E4%BD%9C%E8%BF%87%E6%BB%A42-distinctUntilChanged%E3%80%81single%E3%80%81elementAt%E3%80%81ignoreElement/</url>
    <content><![CDATA[<h1 id="distinctUntilChanged"><a href="#distinctUntilChanged" class="headerlink" title="distinctUntilChanged"></a>distinctUntilChanged</h1><p>过滤连续重复的事件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">let ob &#x3D; Observable.of(1, 1, 1, 3, 5, 7, 9, 9)</span><br><span class="line">ob.distinctUntilChanged().subscribe(onNext: &#123; element in</span><br><span class="line">    print(element)</span><br><span class="line">&#x2F;&#x2F;1 3 5 7 9</span><br><span class="line">&#125;).disposed(by: disposeBag)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h1 id="single"><a href="#single" class="headerlink" title="single"></a>single</h1><p>只发送一次正常事件，如果没有或者超过 1 个会发送 <code>error</code> 事件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">let ob &#x3D; Observable.of(1,2)</span><br><span class="line">ob.single().subscribe(onNext: &#123; element in</span><br><span class="line">    print(element)</span><br><span class="line">&#125;, onError: &#123; error in</span><br><span class="line">    print(&quot;错误&quot;,error)</span><br><span class="line">&#125;).disposed(by: disposeBag)</span><br><span class="line">&#x2F;&#x2F;        1</span><br><span class="line">&#x2F;&#x2F;        错误 Sequence contains more than one element.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;----- single 增加过滤</span><br><span class="line">let ob &#x3D; Observable.of(1, 2, 1)</span><br><span class="line">ob.single &#123; $0 &#x3D;&#x3D; 2 &#125;.subscribe(onNext: &#123; element in</span><br><span class="line">    print(element)</span><br><span class="line">&#125;, onError: &#123; error in</span><br><span class="line">    print(&quot;错误&quot;, error)</span><br><span class="line">&#125;).disposed(by: disposeBag)</span><br><span class="line">&#x2F;&#x2F;        2</span><br></pre></td></tr></table></figure>

<h1 id="elementAt"><a href="#elementAt" class="headerlink" title="elementAt"></a>elementAt</h1><p>获取指定位置的事件，0 开始。 如果没有发生该指定位置事件 会发送错误</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">let ob &#x3D; Observable.of(0, 1, 2, 3, 4)</span><br><span class="line">ob.elementAt(2).subscribe(onNext: &#123; element in</span><br><span class="line">    print(element)</span><br><span class="line">&#125;, onError: &#123; error in</span><br><span class="line">    print(error)</span><br><span class="line">&#125;).disposed(by: disposeBag)</span><br><span class="line">&#x2F;&#x2F;2</span><br></pre></td></tr></table></figure>

<h1 id="ignoreElements"><a href="#ignoreElements" class="headerlink" title="ignoreElements"></a>ignoreElements</h1><p>会忽略所有主动发送的<code>event</code>事件，只保留 <code>error</code> 事件和 <code>Completed</code>事件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">let ob &#x3D; Observable.of(0,1,2,3,4)</span><br><span class="line">ob.ignoreElements().subscribe &#123;</span><br><span class="line">    print(&quot;Completed&quot;)</span><br><span class="line">&#125; onError: &#123; (error) in</span><br><span class="line">    print(error)</span><br><span class="line">&#125;.disposed(by: disposeBag)</span><br></pre></td></tr></table></figure>
<h1 id="take"><a href="#take" class="headerlink" title="take"></a>take</h1><p>只取前 n 个事件，数量达到或不足会发送 <code>Completed</code>。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">let ob &#x3D; Observable.of(0, 1, 2, 3)</span><br><span class="line">ob.take(2).subscribe &#123; element in</span><br><span class="line">    print(element)</span><br><span class="line">&#125; onError: &#123; error in</span><br><span class="line">    print(error)</span><br><span class="line">&#125; onCompleted: &#123;</span><br><span class="line">    print(&quot;onCompleted&quot;)</span><br><span class="line">&#125;.disposed(by: disposeBag)</span><br></pre></td></tr></table></figure>

<h1 id="takeLast"><a href="#takeLast" class="headerlink" title="takeLast"></a>takeLast</h1><p>只取后 n 个事件，数量达到或不足会发送 <code>Completed</code>。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">let ob &#x3D; Observable.of(0, 1, 2, 3, 4)</span><br><span class="line">ob.takeLast(12).subscribe &#123; element in</span><br><span class="line">    print(element)</span><br><span class="line">&#125; onError: &#123; error in</span><br><span class="line">    print(error)</span><br><span class="line">&#125; onCompleted: &#123;</span><br><span class="line">    print(&quot;onCompleted&quot;)</span><br><span class="line">&#125;.disposed(by: disposeBag)</span><br></pre></td></tr></table></figure>

<h1 id="skip"><a href="#skip" class="headerlink" title="skip"></a>skip</h1><p>跳过前 n 个事件，发送完剩下的事件后会发送<code>onCompleted</code>。不足 n 个直接发送<code>onCompleted</code>。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">let ob &#x3D; Observable.of(0,1,2,3,4,5)</span><br><span class="line">ob.skip(4).subscribe &#123; (element) in</span><br><span class="line">    print(element)</span><br><span class="line">&#125; onError: &#123; (error) in</span><br><span class="line">    print(error)</span><br><span class="line">&#125; onCompleted: &#123;</span><br><span class="line">    print(&quot;onCompleted&quot;)</span><br><span class="line">&#125;.disposed(by: disposeBag)</span><br></pre></td></tr></table></figure>

<h1 id="debounce"><a href="#debounce" class="headerlink" title="debounce"></a>debounce</h1><p>当两个事件的发送间隔大于约定时间时才会收到该事件，常用的例子是搜索时延迟搜索</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">let ob &#x3D; PublishSubject&lt;String&gt;()</span><br><span class="line">ob.debounce(RxTimeInterval.seconds(1), scheduler: MainScheduler.instance).subscribe(onNext: &#123; element in</span><br><span class="line">    print(&quot;收&quot;, element, CFAbsoluteTimeGetCurrent())</span><br><span class="line">&#125;).disposed(by: disposeBag)</span><br><span class="line">print(&quot;发&quot;, &quot;aaa&quot;, CFAbsoluteTimeGetCurrent())</span><br><span class="line">ob.onNext(&quot;aaa&quot;)</span><br><span class="line">DispatchQueue.global().asyncAfter(deadline: .now() + 0.5) &#123;</span><br><span class="line">    print(&quot;发&quot;, &quot;bbb&quot;, CFAbsoluteTimeGetCurrent())</span><br><span class="line">    ob.onNext(&quot;bbb&quot;)</span><br><span class="line">&#125;</span><br><span class="line">DispatchQueue.global().asyncAfter(deadline: .now() + 1.5) &#123;</span><br><span class="line">    print(&quot;发&quot;, &quot;ccc&quot;, CFAbsoluteTimeGetCurrent())</span><br><span class="line">    ob.onNext(&quot;ccc&quot;)</span><br><span class="line">&#125;</span><br><span class="line">DispatchQueue.global().asyncAfter(deadline: .now() + 3.5) &#123;</span><br><span class="line">    print(&quot;发&quot;, &quot;ddd&quot;, CFAbsoluteTimeGetCurrent())</span><br><span class="line">    ob.onNext(&quot;ddd&quot;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;发 aaa 627481044.719082</span><br><span class="line">&#x2F;&#x2F;发 bbb 627481045.241852</span><br><span class="line">&#x2F;&#x2F;发 ccc 627481046.231139</span><br><span class="line">&#x2F;&#x2F;收 ccc 627481047.233378</span><br><span class="line">&#x2F;&#x2F;发 ddd 627481048.552644</span><br><span class="line">&#x2F;&#x2F;收 ddd 627481049.55595</span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Swift</category>
      </categories>
      <tags>
        <tag>RxSwift</tag>
      </tags>
  </entry>
  <entry>
    <title>RxSwift-插入发送合并压缩-startWith、merge、zipignoreElement</title>
    <url>/2020/12/17/8--RxSwift-%E6%8F%92%E5%85%A5%E5%8F%91%E9%80%81%E5%90%88%E5%B9%B6%E5%8E%8B%E7%BC%A9-startWith%E3%80%81merge%E3%80%81zip/</url>
    <content><![CDATA[<h1 id="startWith"><a href="#startWith" class="headerlink" title="startWith"></a>startWith</h1><p>在订阅的时候插入发送事件，后加入的先发送。完成事件发送时不会插入。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">let ob &#x3D; PublishSubject&lt;String&gt;()</span><br><span class="line">ob.startWith(&quot;插入1&quot;).startWith(&quot;插入2&quot;).subscribe(onNext: &#123; element in</span><br><span class="line">    print(element)</span><br><span class="line">&#125;).disposed(by: disposeBag)</span><br><span class="line">ob.onNext(&quot;发送1&quot;)</span><br><span class="line">插入2</span><br><span class="line">插入1</span><br><span class="line">发送1</span><br></pre></td></tr></table></figure>

<h1 id="merge"><a href="#merge" class="headerlink" title="merge"></a>merge</h1><p>合并操作，将多个 <code>Observable</code> 合并成一个</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">let ob1 &#x3D; PublishSubject&lt;String&gt;()</span><br><span class="line">let ob2 &#x3D; PublishSubject&lt;String&gt;()</span><br><span class="line">Observable.of(ob1,ob2).merge().subscribe &#123; (event) in</span><br><span class="line">    print(event)</span><br><span class="line">&#125;.disposed(by: disposeBag)</span><br><span class="line">ob1.onNext(&quot;ob1 发1&quot;)</span><br><span class="line">ob2.onNext(&quot;ob2 发1&quot;)</span><br><span class="line">ob1.onNext(&quot;ob1 发2&quot;)</span><br><span class="line">ob2.onNext(&quot;ob2 发2&quot;)</span><br></pre></td></tr></table></figure>

<h1 id="zip"><a href="#zip" class="headerlink" title="zip"></a>zip</h1><p>将 n 个<code>Observable</code>压缩成一个发送事件，必须每个都参与的发送完才会发送一次事件。参与的成对发送完</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">let ob1 &#x3D; PublishSubject&lt;String&gt;()</span><br><span class="line">let ob2 &#x3D; PublishSubject&lt;String&gt;()</span><br><span class="line">Observable.zip(ob1,ob2).subscribe &#123; (event) in</span><br><span class="line">    print(event)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ob1.onNext(&quot;ob1  2&quot;)</span><br><span class="line">ob1.onNext(&quot;ob1  3&quot;)</span><br><span class="line">ob2.onNext(&quot;ob2  A&quot;)</span><br><span class="line">ob2.onNext(&quot;ob2  B&quot;)</span><br><span class="line">ob2.onNext(&quot;ob2  C&quot;)</span><br><span class="line">ob1.onNext(&quot;ob1  1&quot;)</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;next((&quot;ob1  2&quot;, &quot;ob2  A&quot;))</span><br><span class="line">&#x2F;&#x2F;next((&quot;ob1  3&quot;, &quot;ob2  B&quot;))</span><br><span class="line">&#x2F;&#x2F;next((&quot;ob1  1&quot;, &quot;ob2  C&quot;))</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Swift</category>
      </categories>
      <tags>
        <tag>RxSwift</tag>
      </tags>
  </entry>
  <entry>
    <title>RxSwift-转数组、累计操作-toArray、reduce</title>
    <url>/2020/12/17/9--RxSwift-%E8%BD%AC%E6%95%B0%E7%BB%84%E3%80%81%E7%B4%AF%E8%AE%A1%E6%93%8D%E4%BD%9C-toArray%E3%80%81reduce/</url>
    <content><![CDATA[<h1 id="toArray"><a href="#toArray" class="headerlink" title="toArray"></a>toArray</h1><p>将所有的事件集合在一起作为一个数组发出，需要发送<code>onCompleted</code>事件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">let ob &#x3D; PublishSubject&lt;String&gt;()</span><br><span class="line">ob.toArray().subscribe &#123; strArr in</span><br><span class="line">    print(strArr)</span><br><span class="line">&#125; onError: &#123; _ in</span><br><span class="line">&#125;.disposed(by: disposeBag)</span><br><span class="line">ob.onNext(&quot;1&quot;)</span><br><span class="line">ob.onNext(&quot;2&quot;)</span><br><span class="line">ob.onNext(&quot;3&quot;)</span><br><span class="line">ob.onCompleted()</span><br></pre></td></tr></table></figure>

<h1 id="reduce"><a href="#reduce" class="headerlink" title="reduce"></a>reduce</h1><p>累计操作，将每一次的事件都累积在一起在发送<code>onCompleted</code>时统一发送。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">let ob &#x3D; PublishSubject&lt;String&gt;()</span><br><span class="line">ob.reduce(&quot;初始值&quot;, accumulator: +).subscribe &#123; event in</span><br><span class="line">    print(event)</span><br><span class="line">&#125;.disposed(by: disposeBag)</span><br><span class="line">ob.onNext(&quot;1&quot;)</span><br><span class="line">ob.onNext(&quot;2&quot;)</span><br><span class="line">ob.onNext(&quot;3&quot;)</span><br><span class="line">ob.onCompleted()</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Swift</category>
      </categories>
      <tags>
        <tag>RxSwift</tag>
      </tags>
  </entry>
  <entry>
    <title>Flutter 开发错误 StatefulWidget createState must return a subtype of State</title>
    <url>/2020/12/17/Flutter-%E5%BC%80%E5%8F%91%E9%94%99%E8%AF%AF-StatefulWidget-createState-must-return-a-subtype-of-State/</url>
    <content><![CDATA[<p>报错如下:</p>
<p>StatefulWidget.createState must return a subtype of State</p>
<p>The createState function for XXXX2 returned a state of type _XXXXState, which is not a subtype of State<XXXX2>, violating the contract for createState.</p>
<p>错误分析：<br>其实就是返回的 Widget 类型不对，<br>大意了，修改正确即可。</p>
<p><img src="https://upload-images.jianshu.io/upload_images/2331323-a44eecc36a9468ac.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="错误图"></p>
]]></content>
      <categories>
        <category>Flutter</category>
      </categories>
  </entry>
  <entry>
    <title>Flutter 本地图片配置工具 FlutterGen</title>
    <url>/2020/12/17/Flutter-%E6%9C%AC%E5%9C%B0%E5%9B%BE%E7%89%87%E9%85%8D%E7%BD%AE%E5%B7%A5%E5%85%B7-FlutterGen/</url>
    <content><![CDATA[<h1 id="github-gt-FlutterGen"><a href="#github-gt-FlutterGen" class="headerlink" title="github -&gt; FlutterGen"></a><a class="link"   href="https://github.com/FlutterGen" >github -&gt; FlutterGen<i class="fas fa-external-link-alt"></i></a></h1><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 推荐使用 Homebrew 安装</span><br><span class="line">$ brew install FlutterGen&#x2F;tap&#x2F;fluttergen</span><br></pre></td></tr></table></figure>

<p>#使用前先把 assets: 配置好</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">assets:</span><br><span class="line">    - assets&#x2F;images&#x2F;cat.png</span><br></pre></td></tr></table></figure>
<h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ fluttergen -c example&#x2F;pubspec.yaml</span><br></pre></td></tr></table></figure>

<h1 id="VSCode-中-终端使用"><a href="#VSCode-中-终端使用" class="headerlink" title="VSCode 中 终端使用"></a>VSCode 中 终端使用</h1><p><img src="https://upload-images.jianshu.io/upload_images/2331323-645686099e6124e6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="VSCode"></p>
]]></content>
      <categories>
        <category>Flutter</category>
      </categories>
  </entry>
  <entry>
    <title>Flutter 配置相关</title>
    <url>/2020/12/17/Flutter-%E9%85%8D%E7%BD%AE%E7%9B%B8%E5%85%B3/</url>
    <content><![CDATA[<h3 id="问题一"><a href="#问题一" class="headerlink" title="问题一"></a>问题一</h3><blockquote>
<p>CocoaPods requires your terminal to be using UTF-8 encoding<br>Consider adding the following to ~/.profile:<br>export LANG=en_US.UTF-8</p>
</blockquote>
<p>解决方案</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1.打开终端 输入命令open -e .bash_profile</span><br><span class="line">2.在终端输入 export LANG&#x3D;en_US.UTF-8 保存</span><br><span class="line">3.重启VSCode</span><br><span class="line"></span><br><span class="line">⚠️⚠️安装zsh导致全局配置还不行的话⚠️⚠️</span><br><span class="line">1. vim ~&#x2F;.zshrc</span><br><span class="line">2. 按E进入编辑 （大写E）</span><br><span class="line">3. 在最后一行加入  export LANG&#x3D;en_US.UTF-8</span><br><span class="line">4. 按ESC退出编辑  键入 :wq 保存退出</span><br><span class="line">5. 重启VSCode</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="问题二"><a href="#问题二" class="headerlink" title="问题二"></a>问题二</h3><blockquote>
<p>-bash: flutter: command not found</p>
</blockquote>
<p>解决方案</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1.打开终端 输入命令open -e .bash_profile</span><br><span class="line">2.在终端输入 </span><br><span class="line"></span><br><span class="line">export PUB_HOSTED_URL&#x3D;https:&#x2F;&#x2F;pub.flutter-io.cn</span><br><span class="line">export FLUTTER_STORAGE_BASE_URL&#x3D;https:&#x2F;&#x2F;storage.flutter-io.cn</span><br><span class="line">export PATH&#x3D;$&#123;PATH&#125;:&#x2F;Users&#x2F;(你的用户名)&#x2F;flutter&#x2F;bin:$PATH</span><br><span class="line">export PATH&#x3D;$&#123;PATH&#125;:&#x2F;Users&#x2F;(你的用户名)&#x2F;flutter&#x2F;bin</span><br><span class="line">export NO_PROXY&#x3D;localhost,127.0.0.1</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">3.终端输入 source ~&#x2F;.bash_profile保存</span><br><span class="line"></span><br><span class="line">⚠️⚠️安装zsh导致全局配置还不行的话⚠️⚠️</span><br><span class="line">1. vim ~&#x2F;.zshrc</span><br><span class="line">2. 按E进入编辑 （大写E）</span><br><span class="line">3. 在最后一行加入  </span><br><span class="line">export PATH&#x3D;&#x2F;Users&#x2F;z&#x2F;flutter&#x2F;bin:$PATH</span><br><span class="line">export NO_PROXY&#x3D;localhost,127.0.0.1</span><br><span class="line"></span><br><span class="line">4. 按ESC退出编辑  键入 :wq 保存退出</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Flutter</category>
      </categories>
  </entry>
  <entry>
    <title>Flutter 工程修复</title>
    <url>/2020/12/17/Flutter%E5%B7%A5%E7%A8%8B%E4%BF%AE%E5%A4%8D/</url>
    <content><![CDATA[<p>Flutter工程 误删iOS、误删Android等文件时</p>
<p>解决方案</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">打开终端输入</span><br><span class="line">flutter create 工程目录</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Flutter</category>
      </categories>
  </entry>
  <entry>
    <title>Flutter 依赖库查询</title>
    <url>/2020/12/17/Flutter%E6%9F%A5%E8%AF%A2%E4%BE%9D%E8%B5%96%E5%BA%93%E6%9C%80%E6%96%B0%E7%89%88%E6%9C%AC/</url>
    <content><![CDATA[<blockquote>
<p>地址为 <a class="link"   href="https://pub.flutter-io.cn/packages" >https://pub.flutter-io.cn/packages<i class="fas fa-external-link-alt"></i></a></p>
</blockquote>
<p><a class="link"   href="https://pub.flutter-io.cn/packages" >点我前往查询<i class="fas fa-external-link-alt"></i></a></p>
]]></content>
      <categories>
        <category>Flutter</category>
      </categories>
  </entry>
  <entry>
    <title>SnapKit适配刘海屏、异形屏</title>
    <url>/2020/12/17/SnapKit%E9%80%82%E9%85%8D%E5%88%98%E6%B5%B7%E5%B1%8F%E3%80%81%E5%BC%82%E5%BD%A2%E5%B1%8F/</url>
    <content><![CDATA[<h3 id="🌰-适配底部安全距离"><a href="#🌰-适配底部安全距离" class="headerlink" title="🌰 适配底部安全距离"></a>🌰 适配底部安全距离</h3><p>在 ViewController 的 view 中使用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">make.bottom.equalTo(view.snp.bottomMargin)</span><br><span class="line">make.top.equalTo(view.snp.topMargin)</span><br><span class="line">make.left.equalTo(view.snp.leftMargin)</span><br><span class="line">make.right.equalTo(view.snp.rightMargin)</span><br></pre></td></tr></table></figure>

<p>如果 view 的 superView 没有适配，那么 view 布局需要通过上面的写法适配<br>如果 view 的 superView 已经适配，那么 view 布局也会自动适配</p>
<h3 id="完整🌰"><a href="#完整🌰" class="headerlink" title="完整🌰"></a>完整🌰</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">override func viewDidLoad() &#123;</span><br><span class="line">        super.viewDidLoad()</span><br><span class="line">        </span><br><span class="line">        let redView &#x3D; UIView()</span><br><span class="line">        redView.backgroundColor &#x3D; .red</span><br><span class="line">        view.addSubview(redView)</span><br><span class="line">        redView.snp.makeConstraints &#123; make in</span><br><span class="line">            </span><br><span class="line">&#x2F;&#x2F;            make.bottomMargin.equalToSuperview()  &#x2F;&#x2F;没适配</span><br><span class="line">&#x2F;&#x2F;            make.bottom.equalToSuperview()    &#x2F;&#x2F;没适配</span><br><span class="line">            make.bottom.equalTo(view.snp.bottomMargin)    &#x2F;&#x2F;适配</span><br><span class="line">            </span><br><span class="line">&#x2F;&#x2F;            make.topMargin.equalToSuperview()   &#x2F;&#x2F;没适配导航栏高度</span><br><span class="line">&#x2F;&#x2F;            make.top.equalToSuperview()   &#x2F;&#x2F;没适配导航栏高度</span><br><span class="line">            make.top.equalTo(view.snp.topMargin)    &#x2F;&#x2F;适配导航栏高度</span><br><span class="line">            </span><br><span class="line">            </span><br><span class="line">&#x2F;&#x2F;            make.leftMargin.equalToSuperview()   &#x2F;&#x2F;没适配</span><br><span class="line">&#x2F;&#x2F;            make.left.equalToSuperview()   &#x2F;&#x2F;没适配</span><br><span class="line">                      make.left.equalTo(view.snp.leftMargin)    &#x2F;&#x2F;适配</span><br><span class="line">            </span><br><span class="line">&#x2F;&#x2F;            make.rightMargin.equalToSuperview()   &#x2F;&#x2F;没适配</span><br><span class="line">&#x2F;&#x2F;            make.right.equalToSuperview()   &#x2F;&#x2F;没适配</span><br><span class="line">                      make.right.equalTo(view.snp.rightMargin)    &#x2F;&#x2F;适配</span><br><span class="line">        &#125;</span><br><span class="line">  </span><br><span class="line">&#x2F;&#x2F;&#x2F; 如果 redView 已经适配   那么下边的都会适配</span><br><span class="line">&#x2F;&#x2F;&#x2F; 如果 redView 没适配   那么只有最后一个会适配</span><br><span class="line">        let blackView &#x3D; UIView()</span><br><span class="line">        blackView.backgroundColor &#x3D; .black</span><br><span class="line">        redView.addSubview(blackView)</span><br><span class="line">        blackView.snp.makeConstraints &#123; make in</span><br><span class="line">            make.left.right.equalToSuperview()</span><br><span class="line">            make.height.equalTo(150)</span><br><span class="line">&#x2F;&#x2F;            make.bottomMargin.equalToSuperview()  &#x2F;&#x2F;适配</span><br><span class="line">&#x2F;&#x2F;            make.bottom.equalTo(view.snp.bottomMargin)    &#x2F;&#x2F;适配</span><br><span class="line">            make.bottom.equalToSuperview()    &#x2F;&#x2F;没适配</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>iOS</category>
      </categories>
      <tags>
        <tag>SnapKit</tag>
        <tag>适配</tag>
      </tags>
  </entry>
  <entry>
    <title>Swift GCD barrier</title>
    <url>/2020/12/17/Swift-GCD-barrier/</url>
    <content><![CDATA[<h1 id="异步读写造成数组越界"><a href="#异步读写造成数组越界" class="headerlink" title="异步读写造成数组越界"></a>异步读写造成数组越界</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">let count &#x3D; 100000</span><br><span class="line">var array &#x3D; Array(0 ... count)</span><br><span class="line"></span><br><span class="line">func getLast() -&gt; Int &#123;</span><br><span class="line">&#x2F;&#x2F; ⚠️⚠️ 这里加了判断看似安全，但在异步操作时 判断 array.count &gt; 0 的同时可能就有一个异步的操作改变了数组</span><br><span class="line">    if array.count &gt; 0 &#123;</span><br><span class="line">        return array[array.count - 1]</span><br><span class="line">    &#125;</span><br><span class="line">    return -1</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func removeLast() &#123;</span><br><span class="line">    array.removeLast()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">DispatchQueue.global().async &#123;</span><br><span class="line">    for _ in 0 ... count &#123;</span><br><span class="line">        removeLast()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">DispatchQueue.global().async &#123;</span><br><span class="line">    for _ in 0 ... count &#123;</span><br><span class="line">        print(getLast())</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="使用-barrier"><a href="#使用-barrier" class="headerlink" title="使用 barrier"></a>使用 barrier</h1><blockquote>
<p>会保证在同一个队列中 .barrier 执行完之后才会去做其他线程操作</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">let count &#x3D; 100000</span><br><span class="line">var array &#x3D; Array(0 ... count)</span><br><span class="line">let arrayQueue &#x3D; DispatchQueue(label: &quot;arrayQueue&quot;, attributes: DispatchQueue.Attributes.concurrent)</span><br><span class="line"></span><br><span class="line">func getLast() -&gt; Int &#123;</span><br><span class="line">    arrayQueue.sync &#123; () -&gt; Int in</span><br><span class="line">        if array.count &gt; 0 &#123;</span><br><span class="line">            return array[array.count - 1]</span><br><span class="line">        &#125;</span><br><span class="line">        return -1</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func removeLast() &#123;</span><br><span class="line">&#x2F;&#x2F;⚠️⚠️ 这里使用 barrier </span><br><span class="line">    let workItem &#x3D; DispatchWorkItem(qos: DispatchQoS.default, flags: DispatchWorkItemFlags.barrier) &#123;</span><br><span class="line">        array.removeLast()</span><br><span class="line">    &#125;</span><br><span class="line">    arrayQueue.async(execute: workItem)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">DispatchQueue.global().async &#123;</span><br><span class="line">    for _ in 0 ... count &#123;</span><br><span class="line">        removeLast()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">DispatchQueue.global().async &#123;</span><br><span class="line">    for _ in 0 ... count &#123;</span><br><span class="line">        print(getLast())</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Swift</category>
      </categories>
      <tags>
        <tag>GCD</tag>
        <tag>多线程</tag>
      </tags>
  </entry>
  <entry>
    <title>Swift GCD 死锁</title>
    <url>/2020/12/17/Swift-GCD-%E6%AD%BB%E9%94%81/</url>
    <content><![CDATA[<h1 id="1-串行队列中，在异步任务中添加同步任务"><a href="#1-串行队列中，在异步任务中添加同步任务" class="headerlink" title="1. 串行队列中，在异步任务中添加同步任务"></a>1. 串行队列中，在异步任务中添加同步任务</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;&#x2F; 由于没有定义 attributes 所以是串行队列</span><br><span class="line">let queue &#x3D; DispatchQueue(label: &quot;myQueue&quot;)</span><br><span class="line">queue.async &#123;</span><br><span class="line">    print(&quot;----- task 1 -------&quot;)</span><br><span class="line">    queue.sync &#123;</span><br><span class="line">        print(&quot;----- task 2 -------&quot;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">⚠️解决方法</span><br><span class="line">&#x2F;&#x2F;&#x2F; 解决方法将串行改为并行</span><br><span class="line">let queue &#x3D; DispatchQueue(label: &quot;myQueue&quot;, attributes: DispatchQueue.Attributes.concurrent)</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<h1 id="2-主线程同步"><a href="#2-主线程同步" class="headerlink" title="2. 主线程同步"></a>2. 主线程同步</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">let queue &#x3D; DispatchQueue.main</span><br><span class="line">queue.sync &#123;</span><br><span class="line">    print(&quot;----- task 1 -------&quot;)</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Swift</category>
      </categories>
      <tags>
        <tag>GCD</tag>
        <tag>多线程</tag>
      </tags>
  </entry>
  <entry>
    <title>Swift GCD 的串行队列与并行队列</title>
    <url>/2020/12/17/Swift-GCD-%E7%9A%84%E4%B8%B2%E8%A1%8C%E9%98%9F%E5%88%97%E4%B8%8E%E5%B9%B6%E8%A1%8C%E9%98%9F%E5%88%97/</url>
    <content><![CDATA[<table>
<thead>
<tr>
<th>队列</th>
<th>异步是否阻塞当前线程</th>
<th>同步是否阻塞当前线程</th>
<th>执行顺序</th>
</tr>
</thead>
<tbody><tr>
<td>串行队列</td>
<td>否</td>
<td>是</td>
<td>按添加顺序</td>
</tr>
<tr>
<td>并行队列</td>
<td>否</td>
<td>是</td>
<td>同时执行，但会被同步阻塞</td>
</tr>
</tbody></table>
<h1 id="串行队列异步任务不会阻塞线程，同步会阻塞当前线程，执行顺序按添加顺序"><a href="#串行队列异步任务不会阻塞线程，同步会阻塞当前线程，执行顺序按添加顺序" class="headerlink" title="串行队列异步任务不会阻塞线程，同步会阻塞当前线程，执行顺序按添加顺序"></a>串行队列异步任务不会阻塞线程，同步会阻塞当前线程，执行顺序按添加顺序</h1><h1 id="并行队列异步任务不会阻塞线程，同步会阻塞当前线程，同时执行，但会被同步阻塞"><a href="#并行队列异步任务不会阻塞线程，同步会阻塞当前线程，同时执行，但会被同步阻塞" class="headerlink" title="并行队列异步任务不会阻塞线程，同步会阻塞当前线程，同时执行，但会被同步阻塞"></a>并行队列异步任务不会阻塞线程，同步会阻塞当前线程，同时执行，但会被同步阻塞</h1><hr>
<h1 id="串行队列"><a href="#串行队列" class="headerlink" title="串行队列"></a>串行队列</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">let queue &#x3D; DispatchQueue(label: &quot;queue&quot;)</span><br><span class="line">print(&quot;------ 开始 -------&quot;)</span><br><span class="line">queue.async &#123;</span><br><span class="line">    Thread.sleep(forTimeInterval: 3)</span><br><span class="line">    print(&quot;------ async 1 -------&quot;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">print(&quot;------ async 1 不阻塞 -------&quot;)</span><br><span class="line"></span><br><span class="line">queue.async &#123;</span><br><span class="line">    print(&quot;------ async 2 -------&quot;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">queue.sync &#123;</span><br><span class="line">    Thread.sleep(forTimeInterval: 3)</span><br><span class="line">    print(&quot;------ sync 1 -------&quot;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">print(&quot;------ 被 sync 1 阻塞 -------&quot;)</span><br><span class="line"></span><br><span class="line">queue.async &#123;</span><br><span class="line">    print(&quot;------ async 3 -------&quot;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">------ 开始 -------</span><br><span class="line">------ async 1 不阻塞 -------</span><br><span class="line">------ async 1 -------</span><br><span class="line">------ async 2 -------</span><br><span class="line">------ sync 1 -------</span><br><span class="line">------ 被 sync 1 阻塞 -------</span><br><span class="line">------ async 3 -------</span><br></pre></td></tr></table></figure>
<h1 id="并行队列"><a href="#并行队列" class="headerlink" title="并行队列"></a>并行队列</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">let queue &#x3D; DispatchQueue(label: &quot;queue&quot;, attributes: DispatchQueue.Attributes.concurrent)</span><br><span class="line">print(&quot;------ 开始 -------&quot;)</span><br><span class="line">queue.async &#123;</span><br><span class="line">    Thread.sleep(forTimeInterval: 3)</span><br><span class="line">    print(&quot;------ async 1 -------&quot;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">print(&quot;------ async 1 不阻塞 -------&quot;)</span><br><span class="line"></span><br><span class="line">queue.async &#123;</span><br><span class="line">    print(&quot;------ async 2 -------&quot;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">queue.sync &#123;</span><br><span class="line">    Thread.sleep(forTimeInterval: 5)</span><br><span class="line">    print(&quot;------ sync 1 -------&quot;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">print(&quot;------ 被 sync 1 阻塞 -------&quot;)</span><br><span class="line"></span><br><span class="line">queue.async &#123;</span><br><span class="line">    print(&quot;------ async 3 -------&quot;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">------ 开始 -------</span><br><span class="line">------ async 1 不阻塞 -------</span><br><span class="line">------ async 2 -------</span><br><span class="line">------ async 1 -------</span><br><span class="line">------ sync 1 -------</span><br><span class="line">------ 被 sync 1 阻塞 -------</span><br><span class="line">------ async 3 -------</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Swift</category>
      </categories>
      <tags>
        <tag>GCD</tag>
        <tag>多线程</tag>
      </tags>
  </entry>
  <entry>
    <title>Swift String 截取字符串，String 转 NSString</title>
    <url>/2020/12/17/Swift-String-%E6%88%AA%E5%8F%96%E5%AD%97%E7%AC%A6%E4%B8%B2%EF%BC%8C-String-%E8%BD%AC-NSString/</url>
    <content><![CDATA[<h1 id="String-转-NSString，转为-NSString-后-OC-的方法就能使用了"><a href="#String-转-NSString，转为-NSString-后-OC-的方法就能使用了" class="headerlink" title="String 转 NSString，转为 NSString 后 OC 的方法就能使用了"></a>String 转 NSString，转为 NSString 后 OC 的方法就能使用了</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 转为 NSString</span><br><span class="line"> (&quot;ABCD&quot; as NSString)</span><br><span class="line">&#x2F;&#x2F; 调用 NSString 的方法</span><br><span class="line"> (&quot;ABCD&quot; as NSString).substring(to: 1)</span><br></pre></td></tr></table></figure>

<h1 id="Swift-中-String-的字符串截取"><a href="#Swift-中-String-的字符串截取" class="headerlink" title="Swift 中 String 的字符串截取"></a>Swift 中 String 的字符串截取</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">let str &#x3D; &quot;ABCDEFGHIGK&quot;</span><br><span class="line"></span><br><span class="line">       print(&quot;前5个&quot; + &quot;\(str.prefix(5))&quot;)</span><br><span class="line">       &#x2F;&#x2F; 前5个ABCDE</span><br><span class="line"></span><br><span class="line">       print(&quot;前150个&quot; + str.prefix(150))</span><br><span class="line">       &#x2F;&#x2F; 前150个ABCDEFGHIGK</span><br><span class="line"></span><br><span class="line">       print(&quot;后3个&quot; + &quot;\(str.suffix(3))&quot;)</span><br><span class="line">       &#x2F;&#x2F; 后3个IGK</span><br><span class="line"></span><br><span class="line">       print(&quot;后150个&quot; + &quot;\(str.suffix(150))&quot;)</span><br><span class="line">       &#x2F;&#x2F; 后150个ABCDEFGHIGK</span><br><span class="line"></span><br><span class="line">       let startIndex &#x3D; str.index(str.startIndex, offsetBy: 2)</span><br><span class="line">       let endIndex &#x3D; str.index(str.startIndex, offsetBy: 5)</span><br><span class="line"></span><br><span class="line">       print(&quot;2-5是&quot; + str[startIndex ..&lt; endIndex])</span><br><span class="line">       &#x2F;&#x2F; 2-5是CDE</span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Swift</category>
      </categories>
  </entry>
  <entry>
    <title>iOS 多线程</title>
    <url>/2020/12/17/Swift-%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%9A%84%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h1 id="1-Thread"><a href="#1-Thread" class="headerlink" title="1. Thread"></a>1. Thread</h1><h4 id="闭包内直接执行代码"><a href="#闭包内直接执行代码" class="headerlink" title="闭包内直接执行代码"></a>闭包内直接执行代码</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;&#x2F; 闭包内直接执行代码</span><br><span class="line">Thread.detachNewThread &#123;</span><br><span class="line">                print(&quot;111&quot;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="创建一个方法-开启子线程后去调用"><a href="#创建一个方法-开启子线程后去调用" class="headerlink" title="创建一个方法 开启子线程后去调用"></a>创建一个方法 开启子线程后去调用</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;创建一个方法 开启子线程后去调用</span><br><span class="line">let tr &#x3D; Thread(target: self, selector: #selector(threadTest), object: nil)</span><br><span class="line">&#x2F;&#x2F;开启</span><br><span class="line">tr.start()</span><br><span class="line"></span><br><span class="line">@objc func threadTest () &#123;</span><br><span class="line">        print(&quot;777&quot;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="2-Operation"><a href="#2-Operation" class="headerlink" title="2. Operation"></a>2. Operation</h1><h4 id="BlockOperation"><a href="#BlockOperation" class="headerlink" title="BlockOperation"></a>BlockOperation</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;&#x2F; BlockOperation</span><br><span class="line">let operation &#x3D; BlockOperation &#123;</span><br><span class="line">      print(&quot; ----- BlockOperation  -----&quot;)</span><br><span class="line">&#125;</span><br><span class="line">let queue &#x3D; OperationQueue()</span><br><span class="line">queue.addOperation(operation)</span><br></pre></td></tr></table></figure>

<h4 id="继承自-Operation"><a href="#继承自-Operation" class="headerlink" title="继承自 Operation"></a>继承自 Operation</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">&#x2F;&#x2F;&#x2F; 继承自 Operation</span><br><span class="line">class MyOperation: Operation &#123;</span><br><span class="line">            override func main() &#123;</span><br><span class="line">                print(&quot;--- MyOperation do ... ----&quot;)</span><br><span class="line">            &#125;</span><br><span class="line">&#125;</span><br><span class="line">let operation &#x3D; MyOperation()</span><br><span class="line">&#x2F;&#x2F;&#x2F; 当 operation 执行完 会执行这个</span><br><span class="line">operation.completionBlock &#x3D; &#123;</span><br><span class="line">            print(&quot;----- completionBlock  ------&quot;)</span><br><span class="line">&#125;</span><br><span class="line">let queue &#x3D; OperationQueue()</span><br><span class="line">queue.addOperation(operation)</span><br></pre></td></tr></table></figure>

<h1 id="3-GCD"><a href="#3-GCD" class="headerlink" title="3. GCD"></a>3. GCD</h1><h4 id="队列-Queue-常用的"><a href="#队列-Queue-常用的" class="headerlink" title="队列 Queue 常用的"></a>队列 Queue 常用的</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 异步 并行</span><br><span class="line">DispatchQueue.global().async &#123;</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">&#x2F;&#x2F; 回到主线程异步</span><br><span class="line">DispatchQueue.main.async &#123;</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">&#x2F;&#x2F; 异步延时</span><br><span class="line">DispatchQueue.global().asyncAfter(deadline: .now() + 1) &#123;</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>


<h4 id="Queue"><a href="#Queue" class="headerlink" title="Queue"></a>Queue</h4><blockquote>
<p>label：名字标签<br>qos：优先级<br>attributes：串行队列、并行队列 concurrent<br>autoreleaseFrequency：频率</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">let queue &#x3D; DispatchQueue(label: &quot;myQueue&quot;, qos: DispatchQoS.default, attributes: DispatchQueue.Attributes.concurrent, autoreleaseFrequency: DispatchQueue.AutoreleaseFrequency.inherit, target: nil)</span><br><span class="line">        </span><br><span class="line">queue.async &#123;</span><br><span class="line">            print(&quot; --- 异步 ---&quot;)</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">queue.sync &#123;</span><br><span class="line">            print(&quot;--- 同步 -----&quot;)</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">queue.asyncAfter(deadline: .now() + 5) &#123;</span><br><span class="line">            print(&quot;---- 5s ------&quot;)</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>

<h4 id="串行队列"><a href="#串行队列" class="headerlink" title="串行队列"></a>串行队列</h4><blockquote>
<p>同步会等待他上一个进入的线程执行完才会开始(无论上一个线程是同步还是异步)，并且阻挡线程等待自己执行完毕才会继续往下执行</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;&#x2F; 串行队列</span><br><span class="line">let queue &#x3D; DispatchQueue(label: &quot;myQueue&quot;)</span><br><span class="line">let group &#x3D; DispatchGroup()</span><br><span class="line"></span><br><span class="line">print(&quot;------- 开始 -------&quot;)</span><br><span class="line"></span><br><span class="line">group.enter()</span><br><span class="line">queue.async &#123;</span><br><span class="line">    sleep(3)</span><br><span class="line">    print(&quot;------- 异步 A -------&quot;)</span><br><span class="line">    group.leave()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">group.enter()</span><br><span class="line">queue.sync &#123;</span><br><span class="line">    print(&quot;------- 同步 A -------&quot;)</span><br><span class="line">    group.leave()</span><br><span class="line">&#125;</span><br><span class="line">print(&quot;------- 同步 A 结束 -------&quot;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">group.enter()</span><br><span class="line">queue.sync &#123;</span><br><span class="line">    print(&quot;------- 同步 B -------&quot;)</span><br><span class="line">    group.leave()</span><br><span class="line">&#125;</span><br><span class="line">print(&quot;------- 同步 B 结束 -------&quot;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">group.enter()</span><br><span class="line">queue.async &#123;</span><br><span class="line">    sleep(1)</span><br><span class="line">    print(&quot;------- 异步 B -------&quot;)</span><br><span class="line">    group.leave()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">print(&quot;------- 等待 -------&quot;)</span><br><span class="line">&#x2F;&#x2F; wait 会阻塞线程</span><br><span class="line">group.wait()</span><br><span class="line">print(&quot;------- 结束 -------&quot;)</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; notify 不会阻塞</span><br><span class="line">&#x2F;&#x2F;group.notify(queue: queue) &#123;</span><br><span class="line">&#x2F;&#x2F;print(&quot;------- 结束 -------&quot;)</span><br><span class="line">&#x2F;&#x2F;&#125;</span><br><span class="line"></span><br><span class="line">------- 开始 -------</span><br><span class="line">------- 异步 A -------</span><br><span class="line">------- 同步 A -------</span><br><span class="line">------- 同步 A 结束 -------</span><br><span class="line">------- 同步 B -------</span><br><span class="line">------- 同步 B 结束 -------</span><br><span class="line">------- 等待 -------</span><br><span class="line">------- 异步 B -------</span><br><span class="line">------- 结束 -------</span><br></pre></td></tr></table></figure>

<h4 id="并行队列"><a href="#并行队列" class="headerlink" title="并行队列"></a>并行队列</h4><blockquote>
<p>同步会阻塞后面的线程执行，且同步不受前边异步的影响</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">let queue &#x3D; DispatchQueue(label: &quot;myQueue&quot;, attributes: DispatchQueue.Attributes.concurrent)</span><br><span class="line">let group &#x3D; DispatchGroup()</span><br><span class="line"></span><br><span class="line">print(&quot;------- 开始 -------&quot;)</span><br><span class="line"></span><br><span class="line">group.enter()</span><br><span class="line">queue.async &#123;</span><br><span class="line">    sleep(1)</span><br><span class="line">    print(&quot;------- 异步 A -------&quot;)</span><br><span class="line">    group.leave()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">group.enter()</span><br><span class="line">queue.sync &#123;</span><br><span class="line">    sleep(1)</span><br><span class="line">    print(&quot;------- 同步 A -------&quot;)</span><br><span class="line">    group.leave()</span><br><span class="line">&#125;</span><br><span class="line">print(&quot;------- 同步 A 结束 -------&quot;)</span><br><span class="line"></span><br><span class="line">group.enter()</span><br><span class="line">queue.sync &#123;</span><br><span class="line">    sleep(3)</span><br><span class="line">    print(&quot;------- 同步 B -------&quot;)</span><br><span class="line">    group.leave()</span><br><span class="line">&#125;</span><br><span class="line">print(&quot;------- 同步 B 结束 -------&quot;)</span><br><span class="line"></span><br><span class="line">group.enter()</span><br><span class="line">queue.async &#123;</span><br><span class="line">    sleep(2)</span><br><span class="line">    print(&quot;------- 异步 B 耗时操作 -------&quot;)</span><br><span class="line">    group.leave()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">group.notify(queue: queue) &#123;</span><br><span class="line">    print(&quot;------- 全部结束 -------&quot;)</span><br><span class="line">&#125;</span><br><span class="line">print(&quot;------- 未被耗时操作阻塞 -------&quot;)</span><br><span class="line"></span><br><span class="line">------- 开始 -------</span><br><span class="line">------- 同步 A -------</span><br><span class="line">------- 同步 A 结束 -------</span><br><span class="line">------- 异步 A -------</span><br><span class="line">------- 同步 B -------</span><br><span class="line">------- 同步 B 结束 -------</span><br><span class="line">------- 未被耗时操作阻塞 -------</span><br><span class="line">------- 异步 B 耗时操作 -------</span><br><span class="line">------- 全部结束 -------</span><br></pre></td></tr></table></figure>
<h4 id="DispatchSource-定时器例子"><a href="#DispatchSource-定时器例子" class="headerlink" title="DispatchSource 定时器例子"></a>DispatchSource 定时器例子</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var time &#x3D; 7</span><br><span class="line">let timer &#x3D; DispatchSource.makeTimerSource(flags: [], queue: .global())</span><br><span class="line">&#x2F;&#x2F;每秒执行一次</span><br><span class="line">timer.schedule(deadline: .now(), repeating: 1)</span><br><span class="line">timer.setEventHandler &#123;</span><br><span class="line">&#x2F;&#x2F;  由于使用的 queue 是  .global()   这里不是主线程 </span><br><span class="line">    time -&#x3D; 1</span><br><span class="line">    print(&quot;----- \(time)&quot;)</span><br><span class="line">    if time &#x3D;&#x3D; 1 &#123;</span><br><span class="line">        timer.cancel()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">timer.resume()</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>iOS</category>
      </categories>
      <tags>
        <tag>GCD</tag>
        <tag>多线程</tag>
        <tag>Thread</tag>
      </tags>
  </entry>
  <entry>
    <title>Swift 数组</title>
    <url>/2020/12/17/Swift-%E6%95%B0%E7%BB%84/</url>
    <content><![CDATA[<h1 id="删除元素"><a href="#删除元素" class="headerlink" title="删除元素"></a>删除元素</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var list &#x3D; [&quot;1&quot;,&quot;2&quot;,&quot;3&quot;,&quot;4&quot;]</span><br><span class="line">list.removeAll&#123; $0 &#x3D;&#x3D; &quot;2&quot; &#125;</span><br><span class="line">&#x2F;&#x2F;[&quot;1&quot;,&quot;3&quot;,&quot;4&quot;]</span><br></pre></td></tr></table></figure>


<h1 id="Swift-数组遍历的几种方式"><a href="#Swift-数组遍历的几种方式" class="headerlink" title="Swift 数组遍历的几种方式"></a>Swift 数组遍历的几种方式</h1><h3 id="1-for-in-不带索引"><a href="#1-for-in-不带索引" class="headerlink" title="1. for-in 不带索引"></a>1. for-in 不带索引</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">let arr &#x3D; [Int](7 ..&lt; 10)</span><br><span class="line">&#x2F;&#x2F;&#x2F; 不带索引</span><br><span class="line">for obj in arr &#123;</span><br><span class="line">    print(obj)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="2-forEach-不能使用-break-continue-，只能使用-return"><a href="#2-forEach-不能使用-break-continue-，只能使用-return" class="headerlink" title="2. forEach 不能使用 break continue ，只能使用 return"></a>2. forEach 不能使用 break continue ，只能使用 return</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">let arr &#x3D; [Int](7 ..&lt; 10)</span><br><span class="line">&#x2F;&#x2F;&#x2F; 不带索引</span><br><span class="line">arr.forEach &#123; obj in</span><br><span class="line">    &#x2F;&#x2F; 不能使用 break continue ，只能使用 return</span><br><span class="line">    print(obj)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="3-enumerated-带索引-和-值"><a href="#3-enumerated-带索引-和-值" class="headerlink" title="3. enumerated() 带索引 和 值"></a>3. enumerated() 带索引 和 值</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">let arr &#x3D; [Int](7 ..&lt; 10)</span><br><span class="line">&#x2F;&#x2F;&#x2F; 带索引 和 值</span><br><span class="line">for (index, obj) in arr.enumerated() &#123;</span><br><span class="line">    print(&quot;位置：\(index)&quot; + &quot;值：\(obj)&quot;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="4-while"><a href="#4-while" class="headerlink" title="4. while"></a>4. while</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">let arr &#x3D; [Int](7 ..&lt; 10)</span><br><span class="line">&#x2F;&#x2F;&#x2F; 迭代器</span><br><span class="line">var arrIterator &#x3D; arr.makeIterator()</span><br><span class="line">while let obj &#x3D; arrIterator.next() &#123;</span><br><span class="line">    print(obj)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="5-indices-下标索引-遍历下标"><a href="#5-indices-下标索引-遍历下标" class="headerlink" title="5. indices 下标索引 遍历下标"></a>5. indices 下标索引 遍历下标</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">let arr &#x3D; [Int](7 ..&lt; 10)</span><br><span class="line">&#x2F;&#x2F;&#x2F; 下标索引 遍历下标</span><br><span class="line">for index in arr.indices &#123;</span><br><span class="line">    print(index)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="区间-for-in-区间-for-循环"><a href="#区间-for-in-区间-for-循环" class="headerlink" title="区间 for-in 区间 for 循环"></a>区间 for-in 区间 for 循环</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">let s &#x3D; 5</span><br><span class="line">&#x2F;&#x2F;&#x2F; 开区间不包含 50 ， 5 个一输出</span><br><span class="line">for i in stride(from: 0, to: 50, by: s) &#123;</span><br><span class="line">    print(i)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;&#x2F; 闭区间包含 50， 5 个一输出</span><br><span class="line">for i in stride(from: 0, through: 50, by: s) &#123;</span><br><span class="line">    print(i)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="数组的一些查找操作"><a href="#数组的一些查找操作" class="headerlink" title="数组的一些查找操作"></a>数组的一些查找操作</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">let array &#x3D; [Int](7 ..&lt; 117)</span><br><span class="line"></span><br><span class="line">let a &#x3D; array.contains(100)</span><br><span class="line">print(&quot;\(a ? &quot;包含&quot; : &quot;不包含&quot;)&quot; + &quot;100&quot;)</span><br><span class="line"></span><br><span class="line">let b &#x3D; array.contains(where: &#123; $0 &gt; 8 &#125;)</span><br><span class="line">print(&quot;\(b ? &quot;含有大于8的数字&quot; : &quot;不含有大于8的数字&quot;)&quot;)</span><br><span class="line"></span><br><span class="line">let c &#x3D; array.allSatisfy &#123; $0 &gt;&#x3D; 6 &#125;</span><br><span class="line">print(&quot;\(c ? &quot;所有数字都大于等于6&quot; : &quot;有数字小于6&quot;)&quot;)</span><br><span class="line"></span><br><span class="line">print(&quot;数组中第一个元素是&quot; + &quot;\(String(describing: array.first))&quot;)</span><br><span class="line"></span><br><span class="line">print(&quot;数组中最后一个元素是&quot; + &quot;\(String(describing: array.last))&quot;)</span><br><span class="line"></span><br><span class="line">let first &#x3D; array.first(where: &#123; $0 &gt; 8 &#125;)</span><br><span class="line">if let first &#x3D; first &#123;</span><br><span class="line">    print(&quot;第一个大于8的数字是&quot; + &quot;\(first)&quot;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">let last &#x3D; array.last(where: &#123; $0 &gt; 8 &#125;)</span><br><span class="line">if let last &#x3D; last &#123;</span><br><span class="line">    print(&quot;最后一个大于8的数字是&quot; + &quot;\(last)&quot;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;&#x2F; 10 在数组中第一次出现的位置</span><br><span class="line">array.firstIndex(of: 10)</span><br><span class="line">&#x2F;&#x2F;&#x2F; 17 在数组中最后一次出现的位置</span><br><span class="line">array.lastIndex(of: 17)</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Swift</category>
      </categories>
  </entry>
  <entry>
    <title>Swift 添加下标 subscript</title>
    <url>/2020/12/17/Swift-%E6%B7%BB%E5%8A%A0%E4%B8%8B%E6%A0%87-subscript/</url>
    <content><![CDATA[<h1 id="关键子-subscript"><a href="#关键子-subscript" class="headerlink" title="关键子 subscript "></a>关键子 <code>subscript </code></h1><p>参数和返回值可以是任意类型（<code>inout</code>输入输出除外）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">struct People &#123;</span><br><span class="line">    var name &#x3D; &quot;&quot;, age &#x3D; 0</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 给实例添加下标</span><br><span class="line">    subscript(n: String) -&gt; Int &#123;</span><br><span class="line">        get &#123;</span><br><span class="line">            return age</span><br><span class="line">        &#125;</span><br><span class="line">        set &#123;</span><br><span class="line">            age &#x3D; newValue</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 给结构体添加下标</span><br><span class="line">    static subscript(name: String, age: Int) -&gt; People &#123;</span><br><span class="line">        People(name: name, age: age)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var a &#x3D; People(name: &quot;哈哈哈&quot;, age: 18)</span><br><span class="line">print(a[&quot;哈哈哈&quot;])&#x2F;&#x2F;18</span><br><span class="line">a[&quot;哈哈哈&quot;] &#x3D; 20</span><br><span class="line">print(a[&quot;哈哈哈&quot;])&#x2F;&#x2F;20</span><br><span class="line">let p &#x3D; People[&quot;哈喽&quot;, 20]</span><br><span class="line">print(p)&#x2F;&#x2F;People(name: &quot;哈喽&quot;, age: 20)</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Swift</category>
      </categories>
      <tags>
        <tag>下标</tag>
      </tags>
  </entry>
  <entry>
    <title>Swift 的一些高阶函数 map、filter、reduce、flatMap、compactMap</title>
    <url>/2020/12/17/Swift-%E7%9A%84%E4%B8%80%E4%BA%9B%E9%AB%98%E9%98%B6%E5%87%BD%E6%95%B0-map-filter-reduce-flatMap-compactMap/</url>
    <content><![CDATA[<h1 id="map-对集合里的每一个元素进行操作，然后返回个新的集合"><a href="#map-对集合里的每一个元素进行操作，然后返回个新的集合" class="headerlink" title="map 对集合里的每一个元素进行操作，然后返回个新的集合"></a>map 对集合里的每一个元素进行操作，然后返回个新的集合</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">let numbers &#x3D; [1, 3, 5, 7, 9]</span><br><span class="line">&#x2F;&#x2F;&#x2F; 对集合里的每一个元素进行操作，然后返回个新的集合</span><br><span class="line">print(numbers.map &#123; $0 * 10 &#125;)</span><br><span class="line">&#x2F;&#x2F; [10, 30, 50, 70, 90]</span><br></pre></td></tr></table></figure>

<h1 id="filter-过滤集合里面的每一个元素，返回一个满足条件的新的集合"><a href="#filter-过滤集合里面的每一个元素，返回一个满足条件的新的集合" class="headerlink" title="filter 过滤集合里面的每一个元素，返回一个满足条件的新的集合"></a>filter 过滤集合里面的每一个元素，返回一个满足条件的新的集合</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">let numbers &#x3D; [1, 3, 5, 7, 9]</span><br><span class="line">&#x2F;&#x2F;&#x2F; 过滤集合里面的每一个元素，返回一个满足条件的新的集合</span><br><span class="line">print(numbers.filter &#123; $0 &gt; 5 &#125;)</span><br><span class="line">&#x2F;&#x2F; [7, 9]</span><br></pre></td></tr></table></figure>

<h1 id="reduce-对集合里面的每一个元素-作用在当前累计的结果上"><a href="#reduce-对集合里面的每一个元素-作用在当前累计的结果上" class="headerlink" title="reduce  对集合里面的每一个元素 作用在当前累计的结果上"></a>reduce  对集合里面的每一个元素 作用在当前累计的结果上</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;&#x2F; 对集合里面的每一个元素 作用在当前累计的结果上</span><br><span class="line">let abc &#x3D; [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;]</span><br><span class="line">print(abc.reduce(&quot;100&quot;) &#123; $0 + ($1 + &quot;kk&quot;) &#125;)</span><br><span class="line">&#x2F;&#x2F; 100akkbkkckk</span><br></pre></td></tr></table></figure>

<h1 id="flatMap-集合内的元素全是集合，那么把元素拆成同一级-放在一个新的集合里"><a href="#flatMap-集合内的元素全是集合，那么把元素拆成同一级-放在一个新的集合里" class="headerlink" title="flatMap 集合内的元素全是集合，那么把元素拆成同一级 放在一个新的集合里"></a>flatMap 集合内的元素全是集合，那么把元素拆成同一级 放在一个新的集合里</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">let list &#x3D; [[1, 2, 3], [4, 5], [7]]</span><br><span class="line">&#x2F;&#x2F;&#x2F; 集合内的元素全是集合，那么把元素拆成同一级 放在一个新的集合里</span><br><span class="line">print(list.flatMap &#123; $0 &#125;)</span><br><span class="line">&#x2F;&#x2F; [1, 2, 3, 4, 5, 7]</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;&#x2F; 只会拆一层</span><br><span class="line">let list1 &#x3D; [[1, 2, 3], [4, 5], [7], [[8], [9]]]</span><br><span class="line">print(list1.flatMap &#123; $0 &#125;)</span><br><span class="line">&#x2F;&#x2F; [1, 2, 3, 4, 5, 7, [8], [9]]</span><br></pre></td></tr></table></figure>

<h1 id="compactMap-过滤空值"><a href="#compactMap-过滤空值" class="headerlink" title="compactMap 过滤空值"></a>compactMap 过滤空值</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">let names: [String?] &#x3D; [&quot;am&quot;,nil,&quot;qw&quot;,&quot;er&quot;,nil]</span><br><span class="line">&#x2F;&#x2F;&#x2F; 过滤空值</span><br><span class="line">print(names.compactMap&#123; $0 &#125;)</span><br><span class="line">&#x2F;&#x2F;[&quot;am&quot;, &quot;qw&quot;, &quot;er&quot;]</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Swift</category>
      </categories>
      <tags>
        <tag>高阶函数</tag>
      </tags>
  </entry>
  <entry>
    <title>第三方库提示</title>
    <url>/2020/12/17/Swift%E5%AF%BC%E5%85%A5%E7%AC%AC%E4%B8%89%E6%96%B9%E5%BA%93%E3%80%81%E4%BB%A3%E7%A0%81%E4%B8%8D%E6%8F%90%E7%A4%BA/</url>
    <content><![CDATA[<h4 id="1-像OC的pch文件一样导入第三方库"><a href="#1-像OC的pch文件一样导入第三方库" class="headerlink" title="1.像OC的pch文件一样导入第三方库"></a>1.像OC的pch文件一样导入第三方库</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">创建一个Swift文件，在导入的库前添加 @_exported</span><br><span class="line">🌰</span><br><span class="line"></span><br><span class="line">@_exported import Alamofire</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h4 id="2-Swift导入的第三方库代码没提示"><a href="#2-Swift导入的第三方库代码没提示" class="headerlink" title="2.Swift导入的第三方库代码没提示"></a>2.Swift导入的第三方库代码没提示</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1.选择target </span><br><span class="line">2.选择Build Settings </span><br><span class="line">3.搜索 User Header Search Paths</span><br><span class="line">4.填写 $(PODS_ROOT)，并设置为“recursive”  </span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>Swift</category>
      </categories>
  </entry>
  <entry>
    <title>Swift获取值的类型</title>
    <url>/2020/12/17/Swift%E8%8E%B7%E5%8F%96%E5%80%BC%E7%9A%84%E7%B1%BB%E5%9E%8B/</url>
    <content><![CDATA[<p>使用 <code>type(of:)</code> 函数</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">let a &#x3D; type(of:&quot;😄&quot;)</span><br><span class="line"></span><br><span class="line">print(a) &#x2F;&#x2F;String</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><a class="link"   href="https://developer.apple.com/documentation/swift/2885064-type" >直达文档<i class="fas fa-external-link-alt"></i></a></p>
]]></content>
      <categories>
        <category>Swift</category>
      </categories>
  </entry>
  <entry>
    <title>VSCode Flutter 配置</title>
    <url>/2020/12/17/VSCode-Flutter-%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<h1 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h1><ul>
<li>Dart</li>
<li>Flutter</li>
<li>Flutter Generators</li>
<li>Flutter Widget Snippets</li>
<li>Flutter Helpers</li>
<li>[FF] Flutter Files</li>
<li>Awesome Flutter Snippets<h1 id="运行配置"><a href="#运行配置" class="headerlink" title="运行配置"></a>运行配置</h1><code>shift + cmd + d</code> 添加以下配置，这样就不用每次都在终端输入命令了<br><img src="https://upload-images.jianshu.io/upload_images/2331323-c47d75e75723b671.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="操作图"></li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;version&quot;: &quot;0.2.0&quot;,</span><br><span class="line">    &quot;configurations&quot;: [</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;name&quot;: &quot;debug&quot;, &#x2F;&#x2F;debug 模式</span><br><span class="line">            &quot;request&quot;: &quot;launch&quot;,</span><br><span class="line">            &quot;type&quot;: &quot;dart&quot;,</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;name&quot;: &quot;profile&quot;, &#x2F;&#x2F;profile 模式 可解决非联机调试白屏</span><br><span class="line">            &quot;request&quot;: &quot;launch&quot;,</span><br><span class="line">            &quot;type&quot;: &quot;dart&quot;,</span><br><span class="line">            &quot;flutterMode&quot;: &quot;profile&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;name&quot;: &quot;release&quot;, &#x2F;&#x2F;release 模式 可解决非联机调试白屏</span><br><span class="line">            &quot;request&quot;: &quot;launch&quot;,</span><br><span class="line">            &quot;type&quot;: &quot;dart&quot;,</span><br><span class="line">            &quot;flutterMode&quot;: &quot;release&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h3 id="搜索关键词"><a href="#搜索关键词" class="headerlink" title="搜索关键词"></a>搜索关键词</h3><p>VSCode 插件<br>VSCode Flutter 调试配置<br>VSCode Flutter release 模式<br>Flutter release<br>Flutter 启动白屏</p>
<h1 id="如果有帮助求点赞！"><a href="#如果有帮助求点赞！" class="headerlink" title="如果有帮助求点赞！"></a>如果有帮助求点赞！</h1>]]></content>
      <categories>
        <category>Flutter</category>
      </categories>
      <tags>
        <tag>VSCode</tag>
      </tags>
  </entry>
  <entry>
    <title>iOS 常用代码块</title>
    <url>/2020/12/17/Xcode-%E4%BB%A3%E7%A0%81%E5%9D%97/</url>
    <content><![CDATA[<p>一些常用的代码块</p>
<h1 id="点我直达"><a href="#点我直达" class="headerlink" title="点我直达"></a><a class="link"   href="https://github.com/xxxIxxxx/CodeSnippets" >点我直达<i class="fas fa-external-link-alt"></i></a></h1><h1 id="Xcode-路径"><a href="#Xcode-路径" class="headerlink" title="Xcode 路径"></a>Xcode 路径</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">~&#x2F;Library&#x2F;Developer&#x2F;Xcode&#x2F;UserData&#x2F;CodeSnippets</span><br></pre></td></tr></table></figure>

<p>打开路径将文件拖进去<br>代码块添加后需要重启 Xcode</p>
<h1 id="Swift"><a href="#Swift" class="headerlink" title="Swift"></a>Swift</h1><table>
<thead>
<tr>
<th>快捷键</th>
<th>注释</th>
</tr>
</thead>
<tbody><tr>
<td>lazytab</td>
<td>懒加载属性 tableView</td>
</tr>
<tr>
<td>mk</td>
<td>//MARK: -</td>
</tr>
<tr>
<td>snpmake</td>
<td>SnapKit make 布局</td>
</tr>
<tr>
<td>snpremake</td>
<td>SnapKit remake 布局</td>
</tr>
<tr>
<td>initBtn</td>
<td>UIButton 初始化</td>
</tr>
<tr>
<td>initCCell</td>
<td>UICollectionViewCell 初始化</td>
</tr>
<tr>
<td>initImgV</td>
<td>UIImageView 初始化</td>
</tr>
<tr>
<td>initLab</td>
<td>UILable 初始化</td>
</tr>
<tr>
<td>initTCell</td>
<td>UITableViewCell 初始化</td>
</tr>
<tr>
<td>initView</td>
<td>UIView 初始化</td>
</tr>
<tr>
<td>ssself</td>
<td>guard let  strongSelf = self</td>
</tr>
</tbody></table>
<h1 id="OC"><a href="#OC" class="headerlink" title="OC"></a>OC</h1><table>
<thead>
<tr>
<th>快捷键</th>
<th>注释</th>
</tr>
</thead>
<tbody><tr>
<td>initBtn</td>
<td>UIButton 初始化</td>
</tr>
<tr>
<td>initImgV</td>
<td>UIImageView 初始化</td>
</tr>
<tr>
<td>initLab</td>
<td>UILable 初始化</td>
</tr>
<tr>
<td>initCell</td>
<td>UITableViewCell 初始化</td>
</tr>
<tr>
<td>initView</td>
<td>UIView 初始化</td>
</tr>
<tr>
<td>initTextF</td>
<td>UITextField 初始化</td>
</tr>
<tr>
<td>pna</td>
<td>@property (nonatomic, assign)</td>
</tr>
<tr>
<td>pns</td>
<td>@property (nonatomic, strong)</td>
</tr>
<tr>
<td>pnc</td>
<td>@property (nonatomic, copy)</td>
</tr>
<tr>
<td>td</td>
<td>//TODO:</td>
</tr>
<tr>
<td>mas_make</td>
<td>Masonry make 布局</td>
</tr>
<tr>
<td>mas_remake</td>
<td>Masonry remake 布局</td>
</tr>
<tr>
<td>mas_update</td>
<td>Masonry update 布局</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>iOS</category>
      </categories>
      <tags>
        <tag>iOS 代码块</tag>
      </tags>
  </entry>
  <entry>
    <title>Xcode-快捷键，Xcode12-打开控制台</title>
    <url>/2020/12/17/Xcode-%E5%BF%AB%E6%8D%B7%E9%94%AE%EF%BC%8CXcode12-%E6%89%93%E5%BC%80%E6%8E%A7%E5%88%B6%E5%8F%B0/</url>
    <content><![CDATA[<p> 快捷键 | 说明<br>| - | - |<br>command + shift + y  |  打开控制台<br> command + shift + j | 定位当前文件在导航<br> command + shift + o | 输入后快速跳转到对应文件，还可输入方法名<br> command + shift + L | 打开资源文件<br> command + shift + f | 搜索项目<br> command + shift + k | clean 项目<br> command + shift + t | 新开当前项目<br> command + shift + , | 编辑scheme<br> command + shift + 2 | 打开可用调试设备<br> command + shift + w |  关闭项目<br> command + r | 运行项目<br> command + b | build 项目<br> command + . | 停止当前操作<br> command + 0 | 开启/关闭 导航<br> command + 1，2 … 9 | 实操看下效果吧<br> command + f | 搜索当前文件<br> command + L |  跳转到对应行<br> command + w | 关闭当前文件<br> command + y | 关闭断点调试<br> command + \ | 打断点<br> command + , | 偏好设置<br> command + return | 仅编辑器<br>control + 6 | 显示当前文件的方法，然后可以继续输方法名回车跳转<br>control + 0 | 切换 Target<br>control + 4 | 切换项目<br>command + option + w | 保留当前打开，关闭其他文件</p>
<p>欢迎补充比较实用的快捷键！</p>
]]></content>
      <categories>
        <category>Xcode</category>
      </categories>
      <tags>
        <tag>快捷键</tag>
      </tags>
  </entry>
  <entry>
    <title>利用 hexo 和 github 搭建自己的博客</title>
    <url>/2020/12/17/hello-world/</url>
    <content><![CDATA[<h1 id="博客迁移自本人简书"><a href="#博客迁移自本人简书" class="headerlink" title="博客迁移自本人简书"></a><a class="link"   href="https://www.jianshu.com/u/192abcc5117c" >博客迁移自本人简书<i class="fas fa-external-link-alt"></i></a></h1><h1 id="Hexo-教程"><a href="#Hexo-教程" class="headerlink" title="Hexo 教程"></a><a class="link"   href="https://hexo.io/zh-cn/" >Hexo 教程<i class="fas fa-external-link-alt"></i></a></h1><h1 id="Hexo-主题-Keep"><a href="#Hexo-主题-Keep" class="headerlink" title="Hexo 主题 Keep"></a><a class="link"   href="https://keep.xpoet.cn/" >Hexo 主题 Keep<i class="fas fa-external-link-alt"></i></a></h1>]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2020/12/17/iOS-OC-%E4%B8%8E-Swift-%E6%B7%B7%E7%BC%96/</url>
    <content><![CDATA[<hr>
<p>title: iOS OC 与 Swift 混编<br>categories: [iOS]<br>tags: [iOS混编]</p>
<ul>
<li>sticky:  #9999</li>
</ul>
<hr>
<h1 id="1-XXX-Bridging-Header-h"><a href="#1-XXX-Bridging-Header-h" class="headerlink" title="1. XXX-Bridging-Header.h"></a>1. XXX-Bridging-Header.h</h1><p>新建Swift文件时一般会自动提示创建<code>XXX-Bridging-Header.h</code>文件。如果没有那么自己新建一个 Header 文件，命名为<code>项目名-Bridging-Header.h</code><br><img src="https://upload-images.jianshu.io/upload_images/2331323-40814d95e9d8b2f9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="新建 Header 文件"></p>
<h1 id="2-打开-Target-gt-BuildSettings-搜索-Header"><a href="#2-打开-Target-gt-BuildSettings-搜索-Header" class="headerlink" title="2. 打开 Target -&gt; BuildSettings 搜索 Header"></a>2. 打开 Target -&gt; BuildSettings 搜索 <code>Header</code></h1><h2 id="User-Header-Search-Paths-填写-SRCROOT"><a href="#User-Header-Search-Paths-填写-SRCROOT" class="headerlink" title="User Header Search Paths 填写 $(SRCROOT)"></a><code>User Header Search Paths</code> 填写 <code>$(SRCROOT)</code></h2><h2 id="Enable-Modules-c-and-objective-C-填写-YES"><a href="#Enable-Modules-c-and-objective-C-填写-YES" class="headerlink" title="Enable Modules(c and objective-C) 填写 YES"></a><code>Enable Modules(c and objective-C)</code> 填写 <code>YES</code></h2><h2 id="Objective-C-Bridging-Header-填写-项目名称-项目名称-Bridging-Header-h-⚠️这里是个路径"><a href="#Objective-C-Bridging-Header-填写-项目名称-项目名称-Bridging-Header-h-⚠️这里是个路径" class="headerlink" title="Objective-C Bridging Header 填写 项目名称/项目名称-Bridging-Header.h ⚠️这里是个路径"></a><code>Objective-C Bridging Header</code> 填写 <code>项目名称/项目名称-Bridging-Header.h</code> ⚠️这里是个路径</h2><h2 id="Objective-C-Generated-Interface-Header-Name-填写-项目名称-Swift-h-这里是-OC-引用-Swift-需要用到的。"><a href="#Objective-C-Generated-Interface-Header-Name-填写-项目名称-Swift-h-这里是-OC-引用-Swift-需要用到的。" class="headerlink" title="Objective-C Generated Interface Header Name 填写 项目名称-Swift.h 这里是 OC 引用 Swift 需要用到的。"></a><code>Objective-C Generated Interface Header Name</code> 填写 <code>项目名称-Swift.h</code> 这里是 OC 引用 Swift 需要用到的。</h2><p><img src="https://upload-images.jianshu.io/upload_images/2331323-c91b49763e023f54.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="BuildSettings 需要修改的地方"></p>
<h1 id="3-pod-需要修改的地方"><a href="#3-pod-需要修改的地方" class="headerlink" title="3. pod 需要修改的地方"></a>3. pod 需要修改的地方</h1><p>Podfile 增加 <code>use_frameworks!</code> 后重新 <code>pod install</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">target&#39;XXXXX&#39; do</span><br><span class="line">use_frameworks!</span><br></pre></td></tr></table></figure>
<p><strong>⚠️并把所有 <code>pod</code> 导入的库 使用 <code>&lt;&gt;</code> 导入 而不是<code>&quot;&quot;</code> 例如<code>#import &lt;AFNetworking.h&gt;</code></strong></p>
<blockquote>
<p>⚠️第三库报错大多都是导入方式不对引起的⚠️</p>
</blockquote>
<h1 id="4-OC-引用-Swift"><a href="#4-OC-引用-Swift" class="headerlink" title="4. OC 引用 Swift"></a>4. OC 引用 Swift</h1><p>在需要的地方导入 <code>#import &quot;项目名-Swift.h&quot;</code> 然后在需要被引用的属性、方法前增加 <code>@objc</code><br>⚠️ <code> 项目名-Swift.h 这个是隐藏文件看不到</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class XXXViewController: UIViewController &#123;</span><br><span class="line"></span><br><span class="line">    @objc var name:String &#x3D; &quot;&quot;</span><br><span class="line"></span><br><span class="line">    override func viewDidLoad() &#123;</span><br><span class="line">        super.viewDidLoad()</span><br><span class="line">    &#125;  </span><br><span class="line">    @objc func data()  &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="5-Swift-引用-OC"><a href="#5-Swift-引用-OC" class="headerlink" title="5. Swift 引用 OC"></a>5. Swift 引用 OC</h1><p>把需要引用的文件导入到 <code>项目名-Bridging-Header.h</code> ，即可在 Swift 中引用。</p>
]]></content>
  </entry>
  <entry>
    <title>解决导入 `objc/Runtime.h` 和 `objc/message.h` 头文件后，敲击代码不提示 / Runtime 代码不提示</title>
    <url>/2020/12/17/iOS-Runtime/</url>
    <content><![CDATA[<h1 id="解决导入-objc-Runtime-h-和-objc-message-h-头文件后，敲击代码不提示-Runtime-代码不提示"><a href="#解决导入-objc-Runtime-h-和-objc-message-h-头文件后，敲击代码不提示-Runtime-代码不提示" class="headerlink" title="解决导入 objc/Runtime.h 和 objc/message.h 头文件后，敲击代码不提示 / Runtime 代码不提示"></a>解决导入 <code>objc/Runtime.h</code> 和 <code>objc/message.h</code> 头文件后，敲击代码不提示 / Runtime 代码不提示</h1><p>Build Settings 搜索 <code>objc_msg</code><br><img src="https://upload-images.jianshu.io/upload_images/2331323-d1f64b02dd132e27.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Build Settings 修改"></p>
]]></content>
      <categories>
        <category>iOS</category>
      </categories>
      <tags>
        <tag>Runtime</tag>
      </tags>
  </entry>
  <entry>
    <title>WKWebView 加载 html</title>
    <url>/2020/12/17/iOS-WKWebView-loadHTMLString-%E5%BC%82%E6%AD%A5%E5%8A%A0%E8%BD%BD%E5%9B%BE%E7%89%87-%E4%B8%BA%E5%9B%BE%E7%89%87%E6%B7%BB%E5%8A%A0%E7%82%B9%E5%87%BB%E4%BA%8B%E4%BB%B6/</url>
    <content><![CDATA[<h1 id="本文主要是针对后台返回数据是-html-标签的数据加载"><a href="#本文主要是针对后台返回数据是-html-标签的数据加载" class="headerlink" title="本文主要是针对后台返回数据是 html 标签的数据加载"></a>本文主要是针对后台返回数据是 html 标签的数据加载</h1><h1 id="异步加载-html-标签内的-img-标签，给-img-标签添加点击事件"><a href="#异步加载-html-标签内的-img-标签，给-img-标签添加点击事件" class="headerlink" title="异步加载 html 标签内的 img 标签，给 img 标签添加点击事件"></a>异步加载 html 标签内的 img 标签，给 img 标签添加点击事件</h1><hr>
<h1 id="例如返回的数据格式如下"><a href="#例如返回的数据格式如下" class="headerlink" title="例如返回的数据格式如下"></a>例如返回的数据格式如下</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;div&gt;</span><br><span class="line">  一、《望天门山》 作者：唐代李白 1、原文</span><br><span class="line">  天门中断楚江开，碧水东流至此回。两岸青山相对出，孤帆一bai片日边来。 2、译文</span><br><span class="line">  天门山从中间断裂是楚江把它冲开，碧水向东浩然奔流到这里折回。</span><br><span class="line">  两岸高耸的青山隔着长江相峙而立，江面上一叶孤舟像从日边驶来。</span><br><span class="line">  &lt;img</span><br><span class="line">    src&#x3D;&quot;https:&#x2F;&#x2F;wx2.sinaimg.cn&#x2F;large&#x2F;006CHHsBly1gkxrs7785ej31402eoe84.jpg&quot;</span><br><span class="line">  &#x2F;&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line">或者</span><br><span class="line"></span><br><span class="line">完整的 html 标签数据</span><br></pre></td></tr></table></figure>
<p> 这些数据一般都是使用了富文本编辑器编辑的内容，而且各种标签样式都有可能使用到，所以最好还是使用 WKWebView 来加载！<br> 但是如果内容含有 img 标签的话就会等待所有的图片加载完才会展示出整体的样式，这样比较影响体验。<br> 所以应该考虑异步加载图片，而不影响文字等标签样式的展示。</p>
<h1 id="Demo下载"><a href="#Demo下载" class="headerlink" title="Demo下载"></a><a class="link"   href="https://github.com/xxxIxxxx/XXXWebView" >Demo下载<i class="fas fa-external-link-alt"></i></a></h1><h4 id="1-先将图片链接中的-scheme-替换为自定义的-scheme"><a href="#1-先将图片链接中的-scheme-替换为自定义的-scheme" class="headerlink" title="1.先将图片链接中的 scheme 替换为自定义的 scheme"></a>1.先将图片链接中的 scheme 替换为自定义的 scheme</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">- (void)changeImageScheme &#123;</span><br><span class="line">    self.htmlString &#x3D; [self.htmlString stringByReplacingOccurrencesOfString:self.oriImageUrl withString:self.xxxCustomImageUrl];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="2-在-html-标签中添加函数"><a href="#2-在-html-标签中添加函数" class="headerlink" title="2.在 html 标签中添加函数"></a>2.在 html 标签中添加函数</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">- (void)addJsScript &#123;</span><br><span class="line">    </span><br><span class="line">    NSString *htmlLab &#x3D; @&quot;&lt;&#x2F;html&gt;&quot;;</span><br><span class="line">    NSString *scriptLab1 &#x3D; @&quot;&lt;&#x2F;script&gt;&quot;;</span><br><span class="line">    </span><br><span class="line">    NSString *jsFunctionString &#x3D; @&quot;function xxxGetAllImg() &#123; return document.getElementsByTagName(\&quot;img\&quot;); &#125;\</span><br><span class="line">    function xxxUpdateImage(url, imgData) &#123;  var list &#x3D; Array.from(xxxGetAllImg()); for (let item of list) &#123;  if ((item.src &#x3D;&#x3D; url)) &#123; item.src &#x3D; imgData;   break; &#125; &#125; &#125;        &quot;;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    if (![self.htmlString containsString:htmlLab]) &#123;</span><br><span class="line">        [self addHtmlLab];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    if ([self.htmlString containsString:scriptLab1]) &#123;</span><br><span class="line">     </span><br><span class="line">        NSString *scriptString &#x3D; [NSString stringWithFormat:@&quot;%@%@&quot;,jsFunctionString,scriptLab1];</span><br><span class="line">        self.htmlString &#x3D; [self.htmlString stringByReplacingOccurrencesOfString:scriptLab1 withString:scriptString];</span><br><span class="line">        </span><br><span class="line">    &#125;else &#123;</span><br><span class="line">        NSString *scriptLab0 &#x3D; @&quot;&lt;script&gt;&quot;;</span><br><span class="line">        NSString *scriptString &#x3D; [NSString stringWithFormat:@&quot;%@%@%@%@&quot;,scriptLab0,jsFunctionString,scriptLab1,htmlLab];</span><br><span class="line">        self.htmlString &#x3D; [self.htmlString stringByReplacingOccurrencesOfString:htmlLab withString:scriptString];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="3-定义一个实现-WKURLSchemeHandler-协议的类"><a href="#3-定义一个实现-WKURLSchemeHandler-协议的类" class="headerlink" title="3.定义一个实现 WKURLSchemeHandler 协议的类"></a>3.定义一个实现 WKURLSchemeHandler 协议的类</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@interface XXXCustomSchemeHanlder : NSObject &lt;WKURLSchemeHandler&gt;</span><br><span class="line"></span><br><span class="line">@property (nonatomic, copy) NSString *oriImageUrl;</span><br><span class="line">@property (nonatomic, copy) NSString *oriImageScheme;</span><br><span class="line">@property (nonatomic, strong) UIImage *placeholderImage;</span><br><span class="line">@property (nonatomic, copy) void(^updateImageBlock)(void);</span><br><span class="line"></span><br><span class="line">@end</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<h4 id="4-实现协议方法-用于拦截图片加载"><a href="#4-实现协议方法-用于拦截图片加载" class="headerlink" title="4.实现协议方法 用于拦截图片加载"></a>4.实现协议方法 用于拦截图片加载</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">- (void)webView:(nonnull WKWebView *)webView startURLSchemeTask:(nonnull id&lt;WKURLSchemeTask&gt;)urlSchemeTask &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    UIImage *image &#x3D; self.placeholderImage;</span><br><span class="line">    NSData *data &#x3D; UIImageJPEGRepresentation(image, 1.0);</span><br><span class="line">    NSURLResponse *response &#x3D; [[NSURLResponse alloc] initWithURL:urlSchemeTask.request.URL MIMEType:@&quot;image&#x2F;jpeg&quot; expectedContentLength:data.length textEncodingName:nil];</span><br><span class="line">    [urlSchemeTask didReceiveResponse:response];</span><br><span class="line">    [urlSchemeTask didReceiveData:data];</span><br><span class="line">    [urlSchemeTask didFinish];</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    if (self.updateImageBlock) &#123;</span><br><span class="line">        self.updateImageBlock();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    NSString *htmlImageUrlStr &#x3D; [NSString stringWithFormat:@&quot;%@&quot;,urlSchemeTask.request.URL];</span><br><span class="line">    NSString *dloadImageUrlStr &#x3D; [htmlImageUrlStr stringByReplacingOccurrencesOfString:XXXCustomImageScheme withString:self.oriImageScheme];</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(0.5 * NSEC_PER_SEC)), dispatch_get_main_queue(), ^&#123;</span><br><span class="line">        </span><br><span class="line">        [self readImageForKey:dloadImageUrlStr htmlImageUrlStr:htmlImageUrlStr webView:webView];</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">- (void)readImageForKey:(NSString *)dloadImageUrlStr htmlImageUrlStr:(NSString *)htmlImageUrlStr webView:(WKWebView *)webView &#123;</span><br><span class="line">    </span><br><span class="line">    __weak typeof(self) weakSelf &#x3D; self;</span><br><span class="line">    NSURL *url &#x3D; [NSURL URLWithString:dloadImageUrlStr];</span><br><span class="line">    [[SDWebImageManager sharedManager] loadImageWithURL:url options:SDWebImageRetryFailed progress:nil completed:^(UIImage * _Nullable image, NSData * _Nullable data, NSError * _Nullable error, SDImageCacheType cacheType, BOOL finished, NSURL * _Nullable imageURL) &#123;</span><br><span class="line">        if (image || data) &#123;</span><br><span class="line">            NSData *imgData &#x3D; data;</span><br><span class="line">            if (!imgData) &#123;</span><br><span class="line">                imgData &#x3D; UIImageJPEGRepresentation(image, 1);</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            dispatch_async(dispatch_get_main_queue(), ^&#123;</span><br><span class="line">                [weakSelf callJsUpdateImage:webView imageData:imgData htmlImageUrlStr:htmlImageUrlStr];</span><br><span class="line">            &#125;);</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">        if (error) &#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">- (void)callJsUpdateImage:(WKWebView *)webView imageData:(NSData *)imageData htmlImageUrlStr:(NSString *)imageUrlString &#123;</span><br><span class="line">    </span><br><span class="line">    __weak typeof(self) weakSelf &#x3D; self;</span><br><span class="line">    NSString *imageDataStr &#x3D; [NSString stringWithFormat:@&quot;data:image&#x2F;png;base64,%@&quot;,[imageData base64EncodedString]];</span><br><span class="line">    NSString *func &#x3D; [NSString stringWithFormat:@&quot;xxxUpdateImage(&#39;%@&#39;,&#39;%@&#39;)&quot;,imageUrlString,imageDataStr];</span><br><span class="line">    [webView evaluateJavaScript:func completionHandler:^(id _Nullable response, NSError * _Nullable error) &#123;</span><br><span class="line">        if (weakSelf.updateImageBlock &amp;&amp; !error) &#123;</span><br><span class="line">            weakSelf.updateImageBlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;];</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="5-初始化-WKWebView-并配置拦截信息"><a href="#5-初始化-WKWebView-并配置拦截信息" class="headerlink" title="5.初始化 WKWebView 并配置拦截信息"></a>5.初始化 WKWebView 并配置拦截信息</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">WKWebViewConfiguration *config &#x3D; [[WKWebViewConfiguration alloc] init];</span><br><span class="line">XXXCustomSchemeHanlder *schemeHandler &#x3D; XXXCustomSchemeHanlder.new;</span><br><span class="line"></span><br><span class="line">schemeHandler.oriImageScheme &#x3D; self.oriImageScheme;</span><br><span class="line">schemeHandler.oriImageUrl &#x3D; self.oriImageUrl;</span><br><span class="line">schemeHandler.placeholderImage &#x3D; self.placeholderImage;</span><br><span class="line"></span><br><span class="line">__weak typeof(self) weakSelf &#x3D; self;</span><br><span class="line">schemeHandler.updateImageBlock &#x3D; ^ &#123;</span><br><span class="line">    [weakSelf updateHeight];</span><br><span class="line">&#125;;</span><br><span class="line">[config setURLSchemeHandler:schemeHandler forURLScheme:XXXCustomImageScheme];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">WKWebView  *webView &#x3D; [[WKWebView alloc]initWithFrame:CGRectMake(0, 0, self.width, self.height) configuration:config];</span><br></pre></td></tr></table></figure>

<h4 id="6-更新高度"><a href="#6-更新高度" class="headerlink" title="6. 更新高度"></a>6. 更新高度</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">- (void)updateHeight &#123;</span><br><span class="line">    [self nowUpdateHeight];</span><br><span class="line">    [self delayUpdateHeight];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (void)nowUpdateHeight &#123;</span><br><span class="line">    </span><br><span class="line">    __weak typeof(self) weakSelf &#x3D; self;</span><br><span class="line">    [self.webView evaluateJavaScript:@&quot;document.body.offsetHeight&quot; completionHandler:^(id _Nullable result,NSError * _Nullable error) &#123;</span><br><span class="line">        </span><br><span class="line">        &#x2F;&#x2F; 高度会有一点少 ，手动补上 20</span><br><span class="line">        CGFloat height &#x3D; [result floatValue] + 20.0;</span><br><span class="line">        weakSelf.webView.height &#x3D; height;</span><br><span class="line">        weakSelf.height &#x3D; height;</span><br><span class="line">        if (weakSelf.loadOverHeight) &#123;</span><br><span class="line">            weakSelf.loadOverHeight(height);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (void)delayUpdateHeight &#123;</span><br><span class="line">    </span><br><span class="line">    dispatch_after(dispatch_time(DISPATCH_TIME_NOW, DelayTime * NSEC_PER_SEC), dispatch_get_main_queue(), ^&#123;</span><br><span class="line">        [self nowUpdateHeight];</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="Demo下载-1"><a href="#Demo下载-1" class="headerlink" title="Demo下载"></a><a class="link"   href="https://github.com/xxxIxxxx/XXXWebView" >Demo下载<i class="fas fa-external-link-alt"></i></a></h1>]]></content>
      <categories>
        <category>iOS</category>
      </categories>
      <tags>
        <tag>WKWebView</tag>
      </tags>
  </entry>
  <entry>
    <title>iOS Widget 不显示无法添加、iOS Widget 加载网络图片</title>
    <url>/2020/12/17/iOS-Widget-%E4%B8%8D%E6%98%BE%E7%A4%BA%E6%97%A0%E6%B3%95%E6%B7%BB%E5%8A%A0-%E3%80%81iOS-Widget-%E5%8A%A0%E8%BD%BD%E7%BD%91%E7%BB%9C%E5%9B%BE%E7%89%87/</url>
    <content><![CDATA[<h3 id="Intent-Widget-开发"><a href="#Intent-Widget-开发" class="headerlink" title="Intent Widget 开发"></a><a class="link"   href="https://www.jianshu.com/p/029c85bdf16b" >Intent Widget 开发<i class="fas fa-external-link-alt"></i></a></h3><h3 id="Static-Widget-开发"><a href="#Static-Widget-开发" class="headerlink" title="Static Widget 开发"></a><a class="link"   href="https://www.jianshu.com/p/84c180963ac6" >Static Widget 开发<i class="fas fa-external-link-alt"></i></a></h3><h3 id="Demo下载"><a href="#Demo下载" class="headerlink" title="Demo下载"></a><a class="link"   href="https://github.com/xxxIxxxx/WidgetDemo" >Demo下载<i class="fas fa-external-link-alt"></i></a></h3><h1 id="Widget-在添加时找不到"><a href="#Widget-在添加时找不到" class="headerlink" title="Widget 在添加时找不到"></a>Widget 在添加时找不到</h1><p> 出现这种情况，可能是只配置了可编辑的 <code>Widget</code>。<br>导致<code>NSExtensionPointIdentifier</code>只有这一种类型 <code>com.apple.intents-service</code> 会被识别为 Siri 扩展。</p>
<h3 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h3><p>再添加一个不可编辑的 <code>Widget</code> 即可。不需要展示出，在 <code>@main</code>方法里不添加就好。<br>确定新添加的<code>NSExtensionPointIdentifier</code>类型为 <code>com.apple.widgetkit-extension</code> 。</p>
<p><img src="https://upload-images.jianshu.io/upload_images/2331323-7fe44d27ed6af214.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="plist"></p>
<hr>
<h1 id="Widget-是不能做动画也不能异步刷新的，所以图片加载必须同步"><a href="#Widget-是不能做动画也不能异步刷新的，所以图片加载必须同步" class="headerlink" title="Widget 是不能做动画也不能异步刷新的，所以图片加载必须同步"></a>Widget 是不能做动画也不能异步刷新的，所以图片加载必须同步</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">&#x2F;&#x2F;&#x2F; 同步下载图片，Widget 不能异步刷新</span><br><span class="line"></span><br><span class="line">funcgetImage(_imgUrlString:String) -&gt;UIImage? &#123;</span><br><span class="line"></span><br><span class="line"> guardletdata &#x3D;try?Data(contentsOf:URL(string: imgUrlString)!)else&#123;</span><br><span class="line"></span><br><span class="line">        print(&quot;图片下载失败&quot;)</span><br><span class="line"></span><br><span class="line"> returnnil&#125;</span><br><span class="line"></span><br><span class="line">    print(&quot;图片下载成功&quot;)</span><br><span class="line"></span><br><span class="line"> returnUIImage(data: data)</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;使用</span><br><span class="line"></span><br><span class="line">Image(uiImage:getImage(entry.imageUrlStr) ??UIImage(named:&quot;aaaa&quot;)!)</span><br><span class="line"></span><br><span class="line">                        .resizable()</span><br><span class="line"></span><br><span class="line">                        .frame(width:60,</span><br><span class="line"></span><br><span class="line">                               height:60,</span><br><span class="line"></span><br><span class="line">                               alignment: .center)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>iOS</category>
      </categories>
      <tags>
        <tag>Widget</tag>
        <tag>iOS小组件</tag>
      </tags>
  </entry>
  <entry>
    <title>iOS 与 web 交互传图</title>
    <url>/2020/12/17/iOS-%E4%B8%8E-web-%E4%BA%A4%E4%BA%92-%E4%BC%A0%E5%9B%BE/</url>
    <content><![CDATA[<p>web 端将图片 base64 编码后传给 iOS 端，会在 base64 编码前加上 <code>data:image/png;base64,</code> 需要先把这一串给去掉后进行解码，然后转 data 再转为 image </p>
]]></content>
      <categories>
        <category>iOS</category>
      </categories>
  </entry>
  <entry>
    <title>iOS 修改状态栏的颜色 preferredStatusBarStyle</title>
    <url>/2020/12/17/iOS-%E4%BF%AE%E6%94%B9%E7%8A%B6%E6%80%81%E6%A0%8F%E7%9A%84%E9%A2%9C%E8%89%B2-preferredStatusBarStyle/</url>
    <content><![CDATA[<h3 id="⚠️⚠️⚠️首先要在项目的-Info-plist-文件里设置-View-controller-based-status-bar-appearance-为-YES，如果没有就不用添加⚠️-⚠️⚠️"><a href="#⚠️⚠️⚠️首先要在项目的-Info-plist-文件里设置-View-controller-based-status-bar-appearance-为-YES，如果没有就不用添加⚠️-⚠️⚠️" class="headerlink" title="⚠️⚠️⚠️首先要在项目的 Info.plist 文件里设置 View controller-based status bar appearance 为 YES，如果没有就不用添加⚠️ ⚠️⚠️"></a>⚠️⚠️⚠️首先要在项目的 Info.plist 文件里设置 View controller-based status bar appearance 为 YES，如果没有就不用添加⚠️ ⚠️⚠️</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;*</span><br><span class="line">1. 重写 UINavigationController 的 childViewControllerForStatusBarStyle</span><br><span class="line">可以写在基类的 UINavigationController 中，也可以使用Category</span><br><span class="line">*&#x2F;</span><br><span class="line">- (UIViewController *)childViewControllerForStatusBarStyle &#123;</span><br><span class="line">    return self.topViewController;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;&#x2F;Swift </span><br><span class="line">override var childForStatusBarStyle: UIViewController? &#123;</span><br><span class="line">        return topViewController</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;*</span><br><span class="line">2.  在需要改变状态栏颜色的 UIViewController 中实现 preferredStatusBarStyle</span><br><span class="line">*&#x2F;</span><br><span class="line">- (UIStatusBarStyle)preferredStatusBarStyle &#123;</span><br><span class="line">   return UIStatusBarStyleLightContent;</span><br><span class="line">   &#x2F;&#x2F; return UIStatusBarStyleDefault;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;&#x2F;Swift</span><br><span class="line">override var preferredStatusBarStyle: UIStatusBarStyle &#123;</span><br><span class="line">      return .lightContent</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;*</span><br><span class="line">3. 当触发某个条件需要改变状态栏颜色时在 UIViewController 中调用</span><br><span class="line">然后在 - (UIStatusBarStyle)preferredStatusBarStyle; 中判断你的条件是否满足改变颜色</span><br><span class="line">*&#x2F;</span><br><span class="line">[self setNeedsStatusBarAppearanceUpdate];</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;&#x2F;Swift</span><br><span class="line">setNeedsStatusBarAppearanceUpdate()</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>iOS修改状态栏颜色<br>OC 修改状态栏颜色<br>Swift修改状态栏颜色</p>
]]></content>
      <categories>
        <category>iOS</category>
      </categories>
      <tags>
        <tag>UI</tag>
      </tags>
  </entry>
  <entry>
    <title>iOS 多 Target CocoaPods 管理</title>
    <url>/2020/12/17/iOS-%E5%A4%9A-Target-CocoaPods-%E7%AE%A1%E7%90%86/</url>
    <content><![CDATA[<h1 id="1-iOS-多-Target-CocoaPods-管理，直接来看例子"><a href="#1-iOS-多-Target-CocoaPods-管理，直接来看例子" class="headerlink" title="1. iOS 多 Target CocoaPods 管理，直接来看例子"></a>1. iOS 多 Target CocoaPods 管理，直接来看例子</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">platform :ios, &quot;11.0&quot;</span><br><span class="line">source &quot;https:&#x2F;&#x2F;cdn.cocoapods.org&#x2F;&quot;</span><br><span class="line">#source &#39;https:&#x2F;&#x2F;github.com&#x2F;CocoaPods&#x2F;Specs.git&#39;</span><br><span class="line"></span><br><span class="line">#定义公共库</span><br><span class="line">def commonPods</span><br><span class="line">  use_frameworks!</span><br><span class="line"></span><br><span class="line">  pod &quot;KakaJSON&quot;, &quot;~&gt; 1.1.2&quot;</span><br><span class="line">  pod &quot;SnapKit&quot;, &quot;~&gt; 5.0.1&quot;</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">#为 Target1 配置自己独有的库</span><br><span class="line">target &quot;Target1&quot; do</span><br><span class="line">  commonPods</span><br><span class="line">  pod &quot;YYCategories&quot;</span><br><span class="line">  pod &quot;Alamofire&quot;, &quot;~&gt; 5.2.2&quot;</span><br><span class="line">end</span><br><span class="line">#为 Target2 配置自己独有的库</span><br><span class="line">target &quot;Target2&quot; do</span><br><span class="line">  commonPods</span><br><span class="line">  pod &quot;Moya&quot;, &quot;~&gt; 14.0.0&quot;</span><br><span class="line">end</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h1 id="2-判断在哪一个-Target，iOS-Target-判断"><a href="#2-判断在哪一个-Target，iOS-Target-判断" class="headerlink" title="2. 判断在哪一个 Target，iOS Target 判断"></a>2. 判断在哪一个 Target，iOS Target 判断</h1><h3 id="Swift-设置"><a href="#Swift-设置" class="headerlink" title="Swift 设置"></a>Swift 设置</h3><p>Build Settings 搜索 <code>swift compiler</code> 具体看图<br><img src="https://upload-images.jianshu.io/upload_images/2331323-da3235308811d72b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="添加 Target 判断条件"></p>
<h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#if MAINTARGET</span><br><span class="line">tipLab.text &#x3D; &quot;mmmm&quot;</span><br><span class="line">#endif</span><br></pre></td></tr></table></figure>

<h3 id="OC-设置"><a href="#OC-设置" class="headerlink" title="OC 设置"></a>OC 设置</h3><p>Build Settings 搜索 <code>macros</code> 具体看图<br><img src="https://upload-images.jianshu.io/upload_images/2331323-3ae5817bcb53187d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="OC 操作图"></p>
<h3 id="使用-1"><a href="#使用-1" class="headerlink" title="使用"></a>使用</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"> #ifdef TARGETMAIN</span><br><span class="line">NSLog(@&quot;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;TARGETMAIN&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&quot;);</span><br><span class="line"> #endif</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>iOS</category>
      </categories>
      <tags>
        <tag>CocoaPods</tag>
        <tag>Target</tag>
      </tags>
  </entry>
  <entry>
    <title>iOS-报错-&#39;sharedApplication&#39;-is-unavailable--not-available-on-iOS-(App-E</title>
    <url>/2020/12/17/iOS-%E6%8A%A5%E9%94%99-&#39;sharedApplication&#39;-is-unavailable--not-available-on-iOS-(App-E/</url>
    <content><![CDATA[<p>这是因为使用了在 App Extension 内不安全的API</p>
<h3 id="解决办法见下图"><a href="#解决办法见下图" class="headerlink" title="解决办法见下图"></a>解决办法见下图</h3><p><img src="https://upload-images.jianshu.io/upload_images/2331323-2161dedfa7242b3e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="操作步骤图"></p>
<h3 id="CocoapPods-第三方库-报错同样的解决办法见下图"><a href="#CocoapPods-第三方库-报错同样的解决办法见下图" class="headerlink" title="CocoapPods 第三方库 报错同样的解决办法见下图"></a>CocoapPods 第三方库 报错同样的解决办法见下图</h3><p><img src="https://upload-images.jianshu.io/upload_images/2331323-0b33c4b741a47ed7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="操作步骤图"></p>
]]></content>
      <categories>
        <category>iOS</category>
      </categories>
      <tags>
        <tag>Widget</tag>
        <tag>App Extension</tag>
      </tags>
  </entry>
  <entry>
    <title>iOS 用户可编辑的 Widget</title>
    <url>/2020/12/17/iOS14-Widget-%E5%BC%80%E5%8F%91-1/</url>
    <content><![CDATA[<h3 id="本篇是用户可编辑的-Widget"><a href="#本篇是用户可编辑的-Widget" class="headerlink" title="本篇是用户可编辑的 Widget"></a>本篇是用户可编辑的 Widget</h3><h3 id="用户不可编辑的-Widget，点我去看"><a href="#用户不可编辑的-Widget，点我去看" class="headerlink" title="用户不可编辑的 Widget，点我去看"></a><a class="link"   href="https://www.jianshu.com/p/84c180963ac6" >用户不可编辑的 Widget，点我去看<i class="fas fa-external-link-alt"></i></a></h3><h3 id="编辑屏幕-Widget-不显示，Widget-加载网络图片"><a href="#编辑屏幕-Widget-不显示，Widget-加载网络图片" class="headerlink" title="编辑屏幕 Widget 不显示，Widget 加载网络图片"></a><a class="link"   href="https://www.jianshu.com/p/a80d59c94442" >编辑屏幕 Widget 不显示，Widget 加载网络图片<i class="fas fa-external-link-alt"></i></a></h3><h1 id="Demo-下载"><a href="#Demo-下载" class="headerlink" title="Demo 下载"></a><a class="link"   href="https://github.com/xxxIxxxx/WidgetDemo" >Demo 下载<i class="fas fa-external-link-alt"></i></a></h1><h1 id="先来看效果图"><a href="#先来看效果图" class="headerlink" title="先来看效果图"></a>先来看效果图</h1><p><img src="https://upload-images.jianshu.io/upload_images/2331323-196fcdf3f96e1360.JPEG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="效果图"></p>
<h1 id="建议将-demo-下载下来对照着看对应-demo-里的-AnimalWidget-文件"><a href="#建议将-demo-下载下来对照着看对应-demo-里的-AnimalWidget-文件" class="headerlink" title="建议将 demo 下载下来对照着看对应 demo 里的 AnimalWidget 文件"></a>建议将 demo 下载下来对照着看对应 demo 里的 AnimalWidget 文件</h1><h3 id="1-新建-Widget-Extension，勾选-Intent。"><a href="#1-新建-Widget-Extension，勾选-Intent。" class="headerlink" title="1. 新建 Widget Extension，勾选 Intent。"></a>1. 新建 Widget Extension，勾选 Intent。</h3><p><img src="https://upload-images.jianshu.io/upload_images/2331323-4c736e922128a5f9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="1. 新建 Widget Extension，勾选 Intent"></p>
<h3 id="2-点击-AnimalWidget-intentdefinition-文件-添加可编辑的数据类型-具体操作看图吧"><a href="#2-点击-AnimalWidget-intentdefinition-文件-添加可编辑的数据类型-具体操作看图吧" class="headerlink" title="2. 点击 AnimalWidget.intentdefinition 文件 添加可编辑的数据类型 具体操作看图吧"></a>2. 点击 AnimalWidget.intentdefinition 文件 添加可编辑的数据类型 具体操作看图吧</h3><p><img src="https://upload-images.jianshu.io/upload_images/2331323-e26dffe1a81d1a99.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="2. 点击 AnimalWidget.intentdefinition 文件 具体操作看图吧"></p>
<h3 id="3-为第二步新增的数据类型-设置对应的值"><a href="#3-为第二步新增的数据类型-设置对应的值" class="headerlink" title="3. 为第二步新增的数据类型 设置对应的值"></a>3. 为第二步新增的数据类型 设置对应的值</h3><p><img src="https://upload-images.jianshu.io/upload_images/2331323-6c898cf25193f0c2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p>
<h3 id="4-编辑-Info-plist-️是-widget-extension-的-Info-plist"><a href="#4-编辑-Info-plist-️是-widget-extension-的-Info-plist" class="headerlink" title="4. 编辑 Info.plist (️是 widget extension 的 Info.plist )"></a>4. 编辑 Info.plist (️是 widget extension 的 Info.plist )</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;key&gt;NSExtension&lt;&#x2F;key&gt;</span><br><span class="line">	&lt;dict&gt;</span><br><span class="line">		&lt;key&gt;IntentsSupported&lt;&#x2F;key&gt;</span><br><span class="line">		&lt;array&gt;</span><br><span class="line">			&lt;string&gt;AnimalWidgetConfigurationIntent&lt;&#x2F;string&gt;</span><br><span class="line">		&lt;&#x2F;array&gt;</span><br><span class="line">		&lt;key&gt;NSExtensionAttributes&lt;&#x2F;key&gt;</span><br><span class="line">		&lt;dict&gt;</span><br><span class="line">			&lt;key&gt;IntentsRestrictedWhileLocked&lt;&#x2F;key&gt;</span><br><span class="line">			&lt;array&#x2F;&gt;</span><br><span class="line">			&lt;key&gt;IntentsRestrictedWhileProtectedDataUnavailable&lt;&#x2F;key&gt;</span><br><span class="line">			&lt;array&#x2F;&gt;</span><br><span class="line">			&lt;key&gt;IntentsSupported&lt;&#x2F;key&gt;</span><br><span class="line">			&lt;array&gt;</span><br><span class="line">				&lt;string&gt;AnimalWidgetConfigurationIntent&lt;&#x2F;string&gt;</span><br><span class="line">			&lt;&#x2F;array&gt;</span><br><span class="line">		&lt;&#x2F;dict&gt;</span><br><span class="line">		&lt;key&gt;NSExtensionPointIdentifier&lt;&#x2F;key&gt;</span><br><span class="line">		&lt;string&gt;com.apple.intents-service&lt;&#x2F;string&gt;</span><br><span class="line">		&lt;key&gt;NSExtensionPrincipalClass&lt;&#x2F;key&gt;</span><br><span class="line">		&lt;string&gt;$(PRODUCT_MODULE_NAME).IntentHandler&lt;&#x2F;string&gt;</span><br><span class="line">	&lt;&#x2F;dict&gt;</span><br></pre></td></tr></table></figure>
<p><img src="https://upload-images.jianshu.io/upload_images/2331323-8bb6ff14aab5c9eb.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="4. 编辑 Info.plist (️是 widget extension 的 Info.plist )"></p>
<h3 id="5-创建-IntentHandler-swift-添加一下代码-可能会报错-找不到-AnimalWidgetConfigurationIntentHandling-、AnimalWidgetConfigurationIntent-先不管先把别的配置好"><a href="#5-创建-IntentHandler-swift-添加一下代码-可能会报错-找不到-AnimalWidgetConfigurationIntentHandling-、AnimalWidgetConfigurationIntent-先不管先把别的配置好" class="headerlink" title="5. 创建 IntentHandler.swift 添加一下代码 (可能会报错 找不到 AnimalWidgetConfigurationIntentHandling 、AnimalWidgetConfigurationIntent  先不管先把别的配置好)"></a>5. 创建 IntentHandler.swift 添加一下代码 (可能会报错 找不到 AnimalWidgetConfigurationIntentHandling 、AnimalWidgetConfigurationIntent  先不管先把别的配置好)</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import Intents</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;&#x2F; 自己创建的文件</span><br><span class="line">class IntentHandler: INExtension, AnimalWidgetConfigurationIntentHandling &#123; &#x2F;&#x2F; AnimalWidgetConfigurationIntentHandling 是第二步的名字 加上 IntentHandling 后缀</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    &#x2F;&#x2F;&#x2F; 配置给用户可选的列表                    AnimalWidgetConfigurationIntent 是第二步的名字 加上 Intent 后缀</span><br><span class="line">    func provideAnimalOptionsCollection(for intent: AnimalWidgetConfigurationIntent, searchTerm: String?, with completion: @escaping (INObjectCollection&lt;Animal&gt;?, Error?) -&gt; Void) &#123;</span><br><span class="line">        </span><br><span class="line">        &#x2F;&#x2F;&#x2F; 这里可以去请求网络拿数据</span><br><span class="line">        </span><br><span class="line">        &#x2F;&#x2F;&#x2F;搜索词 searchTerm 搜索cat</span><br><span class="line">        if searchTerm &#x3D;&#x3D; &quot;cat&quot; &#123;</span><br><span class="line">            completion(INObjectCollection(items: [Animal(identifier: &quot;cat&quot;, display: &quot;cat&quot;)]), nil)</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        let animals: [Animal] &#x3D; XXXAnimal.zoo.map &#123; (xxxAnimal) in</span><br><span class="line">            return Animal(identifier: xxxAnimal.id, display: xxxAnimal.name)</span><br><span class="line">        &#125;</span><br><span class="line">        completion(INObjectCollection(items: animals), nil)</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    override func handler(for intent: INIntent) -&gt; Any &#123;</span><br><span class="line">        return self</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="6-修改-AnimalWidget-swift-内容"><a href="#6-修改-AnimalWidget-swift-内容" class="headerlink" title="6. 修改 AnimalWidget.swift 内容"></a>6. 修改 AnimalWidget.swift 内容</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">如果你的工程已经存在了一个 Widget 将 @main 去掉</span><br><span class="line">使用下面</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;我的这部分代码在 XXXWidget.swift</span><br><span class="line">@main</span><br><span class="line">struct AllWidget: WidgetBundle &#123;</span><br><span class="line">    </span><br><span class="line">    @WidgetBundleBuilder</span><br><span class="line">    var body: some Widget &#123;</span><br><span class="line">        XXXWidget()</span><br><span class="line">        AnimalWidget()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<hr>
<h4 id="修改-TimelineEntry"><a href="#修改-TimelineEntry" class="headerlink" title="修改 TimelineEntry"></a>修改 TimelineEntry</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">struct SimpleEntry: TimelineEntry &#123;</span><br><span class="line">    let date: Date</span><br><span class="line">    let configuration: ConfigurationIntent</span><br><span class="line">&#125;</span><br><span class="line">--------------原️----新️-----------------</span><br><span class="line">&#x2F;&#x2F;&#x2F; 重新命名 去掉 let configuration: ConfigurationIntent  （也可以保留但类型是 AnimalWidgetConfigurationIntent）</span><br><span class="line">&#x2F;&#x2F;&#x2F;增加自己需要的参数</span><br><span class="line">struct AnimalSimpleEntry: TimelineEntry &#123;</span><br><span class="line">    let date: Date</span><br><span class="line">    &#x2F;&#x2F;&#x2F; 新加自己需要的参数</span><br><span class="line">    let animal: XXXAnimal</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<hr>
<h4 id="修改-IntentTimelineProvider"><a href="#修改-IntentTimelineProvider" class="headerlink" title="修改 IntentTimelineProvider"></a>修改 IntentTimelineProvider</h4><h4 id="️-涉及到-AnimalWidgetConfigurationIntent-可能会报错-先不管-️"><a href="#️-涉及到-AnimalWidgetConfigurationIntent-可能会报错-先不管-️" class="headerlink" title="️ 涉及到 AnimalWidgetConfigurationIntent 可能会报错 先不管 ️"></a><strong>️ 涉及到 AnimalWidgetConfigurationIntent 可能会报错 先不管 ️</strong></h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">struct Provider: IntentTimelineProvider &#123;</span><br><span class="line">    func placeholder(in context: Context) -&gt; SimpleEntry &#123;</span><br><span class="line">        SimpleEntry(date: Date(), configuration: ConfigurationIntent())</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    func getSnapshot(for configuration: ConfigurationIntent, in context: Context, completion: @escaping (SimpleEntry) -&gt; ()) &#123;</span><br><span class="line">        let entry &#x3D; SimpleEntry(date: Date(), configuration: configuration)</span><br><span class="line">        completion(entry)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    func getTimeline(for configuration: ConfigurationIntent, in context: Context, completion: @escaping (Timeline&lt;Entry&gt;) -&gt; ()) &#123;</span><br><span class="line">        var entries: [SimpleEntry] &#x3D; []</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F; Generate a timeline consisting of five entries an hour apart, starting from the current date.</span><br><span class="line">        let currentDate &#x3D; Date()</span><br><span class="line">        for hourOffset in 0 ..&lt; 5 &#123;</span><br><span class="line">            let entryDate &#x3D; Calendar.current.date(byAdding: .hour, value: hourOffset, to: currentDate)!</span><br><span class="line">            let entry &#x3D; SimpleEntry(date: entryDate, configuration: configuration)</span><br><span class="line">            entries.append(entry)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        let timeline &#x3D; Timeline(entries: entries, policy: .atEnd)</span><br><span class="line">        completion(timeline)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">--------------原️----新️-----------------</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 重新命名</span><br><span class="line">struct AnimalProvider: IntentTimelineProvider &#123;</span><br><span class="line">    </span><br><span class="line">&#x2F;&#x2F; 按照要求增加  Entry 和 Intent</span><br><span class="line">    typealias Entry &#x3D; AnimalSimpleEntry</span><br><span class="line">    typealias Intent &#x3D; AnimalWidgetConfigurationIntent</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    func placeholder(in context: Context) -&gt; AnimalSimpleEntry &#123;</span><br><span class="line">        AnimalSimpleEntry(date: Date(), animal: .lion)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    func getSnapshot(for configuration: AnimalWidgetConfigurationIntent, in context: Context, completion: @escaping (AnimalSimpleEntry) -&gt; ()) &#123;</span><br><span class="line">        let entry &#x3D; AnimalSimpleEntry(date: Date(), animal: .lion)</span><br><span class="line">        completion(entry)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    func getTimeline(for configuration: AnimalWidgetConfigurationIntent, in context: Context, completion: @escaping (Timeline&lt;Entry&gt;) -&gt; ()) &#123;</span><br><span class="line">        </span><br><span class="line">        let currentDate &#x3D; Date()</span><br><span class="line">        </span><br><span class="line">        guard let id &#x3D; configuration.animal?.identifier, let entryDate &#x3D; Calendar.current.date(byAdding: .minute, value: 1, to: currentDate) else &#123;</span><br><span class="line">            let timeline &#x3D; Timeline(entries: [AnimalSimpleEntry(date: currentDate, animal: .lion)], policy: .atEnd)</span><br><span class="line">            completion(timeline)</span><br><span class="line">            return</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        let entry &#x3D; AnimalSimpleEntry(date: entryDate, animal: XXXAnimal.animal(id, color: configuration.color))</span><br><span class="line">        </span><br><span class="line">        let timeline &#x3D; Timeline(entries: [entry], policy: .atEnd)</span><br><span class="line">        completion(timeline)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="其他地方对照-demo-修改就可以了"><a href="#其他地方对照-demo-修改就可以了" class="headerlink" title="其他地方对照 demo 修改就可以了"></a>其他地方对照 demo 修改就可以了</h2><h1 id="️如果有-Cannot-find-type-‘AnimalWidgetConfigurationIntent’-in-scope-报错-尝试多-build-几次或者-重启-Xcode️"><a href="#️如果有-Cannot-find-type-‘AnimalWidgetConfigurationIntent’-in-scope-报错-尝试多-build-几次或者-重启-Xcode️" class="headerlink" title="️如果有  Cannot find type ‘AnimalWidgetConfigurationIntent’ in scope 报错 尝试多 build 几次或者 重启 Xcode️"></a>️如果有  Cannot find type ‘AnimalWidgetConfigurationIntent’ in scope 报错 尝试多 build 几次或者 重启 Xcode️</h1><p><img src="https://upload-images.jianshu.io/upload_images/2331323-194231fd2ac108f3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="其他注意"></p>
]]></content>
      <categories>
        <category>iOS</category>
      </categories>
      <tags>
        <tag>Widget</tag>
      </tags>
  </entry>
  <entry>
    <title>iOS14 Widget</title>
    <url>/2020/12/17/iOS14-Widget-%E5%BC%80%E5%8F%91/</url>
    <content><![CDATA[<h1 id="Demo-下载"><a href="#Demo-下载" class="headerlink" title="Demo 下载"></a><a class="link"   href="https://github.com/xxxIxxxx/WidgetDemo" >Demo 下载<i class="fas fa-external-link-alt"></i></a></h1><h3 id="这个是用户不可配置的，没有编辑选项的-widget"><a href="#这个是用户不可配置的，没有编辑选项的-widget" class="headerlink" title="这个是用户不可配置的，没有编辑选项的 widget"></a>这个是用户不可配置的，没有编辑选项的 widget</h3><h3 id="Intent-用户可编辑的点我去看"><a href="#Intent-用户可编辑的点我去看" class="headerlink" title="Intent 用户可编辑的点我去看"></a><a class="link"   href="https://www.jianshu.com/p/029c85bdf16b" >Intent 用户可编辑的点我去看<i class="fas fa-external-link-alt"></i></a></h3><p><img src="https://upload-images.jianshu.io/upload_images/2331323-126d13797dd4e2de.jpeg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="效果图"></p>
<h3 id="代码如下"><a href="#代码如下" class="headerlink" title="代码如下"></a>代码如下</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;&#x2F; 时间线</span><br><span class="line">struct XXXProvider: TimelineProvider &#123;</span><br><span class="line">    </span><br><span class="line">    &#x2F;&#x2F;&#x2F; 占位的展示</span><br><span class="line">    func placeholder(in context: Context) -&gt; XXXSimpleEntry &#123;</span><br><span class="line">        XXXSimpleEntry(date: Date(), displayTime: XXXData.displayData())</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    &#x2F;&#x2F;&#x2F; 快照</span><br><span class="line">    func getSnapshot(in context: Context, completion: @escaping (XXXSimpleEntry) -&gt; ()) &#123;</span><br><span class="line">        let entry &#x3D; XXXSimpleEntry(date: Date(), displayTime: XXXData.displayData())</span><br><span class="line">        completion(entry)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;&#x2F;根据时间线提供需要展示的状态</span><br><span class="line">    func getTimeline(in context: Context, completion: @escaping (Timeline&lt;Entry&gt;) -&gt; ()) &#123;</span><br><span class="line">        </span><br><span class="line">        print(&quot;时间线刷新了&quot; + &quot;\(Date())&quot;)</span><br><span class="line">        </span><br><span class="line">        var entrys: [XXXSimpleEntry] &#x3D; []</span><br><span class="line">        let currentData &#x3D; Date()</span><br><span class="line">        </span><br><span class="line">        &#x2F;&#x2F;&#x2F; 提供当前时间后 1个小时内  每一秒的状态 (已经提供了3600个状态，太多会不展示卡死)</span><br><span class="line">        for i in 0...60*60 &#123;</span><br><span class="line">            guard let entryDate &#x3D; Calendar.current.date(byAdding: .second, value: i, to: currentData) else &#123;</span><br><span class="line">                return</span><br><span class="line">            &#125;</span><br><span class="line">            entrys.append(XXXSimpleEntry(date: entryDate, displayTime: XXXData.displayData(entryDate)))</span><br><span class="line">        &#125;</span><br><span class="line">        let timeline &#x3D; Timeline(entries: entrys, policy: .atEnd)</span><br><span class="line">        completion(timeline)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;&#x2F; 每一个时间线的实体</span><br><span class="line">struct XXXSimpleEntry: TimelineEntry &#123;</span><br><span class="line">    &#x2F;&#x2F;&#x2F;展示该状态的时间</span><br><span class="line">    let date: Date</span><br><span class="line">    &#x2F;&#x2F;&#x2F; 自己配置的数据</span><br><span class="line">    let displayTime: String</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;&#x2F; widget 展示 view</span><br><span class="line">struct XXXWidgetEntryView : View &#123;</span><br><span class="line">    var entry: XXXProvider.Entry</span><br><span class="line">    &#x2F;&#x2F;&#x2F; 返回在这个时间 (entry.date)    你想要展示的widegt样式</span><br><span class="line">    var body: some View &#123;</span><br><span class="line">        ZStack &#123;</span><br><span class="line">            </span><br><span class="line">            Color.orange.edgesIgnoringSafeArea(.all)</span><br><span class="line">            VStack &#123;</span><br><span class="line">                Text(entry.displayTime)</span><br><span class="line">                    .multilineTextAlignment(.center)</span><br><span class="line">                    .foregroundColor(.blue)</span><br><span class="line">                    &#x2F;&#x2F;&#x2F;配置点击链接会在主工程收到拉起事件</span><br><span class="line">                    .widgetURL(URL(string: &quot;widgetDemo:&#x2F;&#x2F;789&quot;))</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;&#x2F;widget</span><br><span class="line">struct XXXWidget: Widget &#123;</span><br><span class="line">    let kind: String &#x3D; &quot;XXXWidget&quot;</span><br><span class="line"></span><br><span class="line">    var body: some WidgetConfiguration &#123;</span><br><span class="line">        &#x2F;&#x2F;&#x2F; StaticConfiguration 是静态的，用户不可配置的 长按不会出现编辑</span><br><span class="line">        StaticConfiguration(kind: kind, provider: XXXProvider()) &#123; entry in</span><br><span class="line">            XXXWidgetEntryView(entry: entry)</span><br><span class="line">        &#125;</span><br><span class="line">        .configurationDisplayName(&quot;添加时的标题&quot;)</span><br><span class="line">        .description(&quot;添加时的描述&quot;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;&#x2F;提供预览状态</span><br><span class="line">struct XXXWidget_Previews: PreviewProvider &#123;</span><br><span class="line">    </span><br><span class="line">    static var previews: some View &#123;</span><br><span class="line">        XXXWidgetEntryView(entry: XXXSimpleEntry(date: Date(), displayTime: XXXData.displayData()))</span><br><span class="line">            .previewContext(WidgetPreviewContext(family: .systemSmall))</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;&#x2F;主入口</span><br><span class="line">@main</span><br><span class="line">struct AllWidget: WidgetBundle &#123;</span><br><span class="line">    </span><br><span class="line">    @WidgetBundleBuilder</span><br><span class="line">    var body: some Widget &#123;</span><br><span class="line">        XXXWidget()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>


<h3 id="部分操作的详细截图"><a href="#部分操作的详细截图" class="headerlink" title="部分操作的详细截图"></a>部分操作的详细截图</h3><p><img src="https://upload-images.jianshu.io/upload_images/2331323-d4e70bcacfcacc7d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="File -&gt; New -&gt; Target"></p>
<p><img src="https://upload-images.jianshu.io/upload_images/2331323-b19a4ce4f064179c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="这个是用户不可配置的widget，勾选的是用户可配置的。我们先来做不可配置的"></p>
<p><img src="https://upload-images.jianshu.io/upload_images/2331323-786376718471b3c5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="调整最低运行系统"></p>
<p><img src="https://upload-images.jianshu.io/upload_images/2331323-5fcaf3ede4232577.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="关联主工程数据"></p>
<h1 id="Demo-下载-1"><a href="#Demo-下载-1" class="headerlink" title="Demo 下载"></a><a class="link"   href="https://github.com/xxxIxxxx/WidgetDemo" >Demo 下载<i class="fas fa-external-link-alt"></i></a></h1>]]></content>
      <categories>
        <category>iOS</category>
      </categories>
      <tags>
        <tag>Widget</tag>
      </tags>
  </entry>
  <entry>
    <title>iOS占位图、空白页面</title>
    <url>/2020/12/17/iOS%E5%8D%A0%E4%BD%8D%E5%9B%BE%E3%80%81%E7%A9%BA%E7%99%BD%E9%A1%B5%E9%9D%A2/</url>
    <content><![CDATA[<h1 id="iOS占位图、空白页面-Github直达"><a href="#iOS占位图、空白页面-Github直达" class="headerlink" title="iOS占位图、空白页面 Github直达"></a><a class="link"   href="https://github.com/xxxIxxxx/XXXPlaceholder" >iOS占位图、空白页面 Github直达<i class="fas fa-external-link-alt"></i></a></h1><h1 id="iOS占位图、空白页面-适用于view、tableView、collectionView、scrollvew"><a href="#iOS占位图、空白页面-适用于view、tableView、collectionView、scrollvew" class="headerlink" title="iOS占位图、空白页面 适用于view、tableView、collectionView、scrollvew"></a>iOS占位图、空白页面 适用于view、tableView、collectionView、scrollvew</h1><h1 id="😄😄😄"><a href="#😄😄😄" class="headerlink" title="😄😄😄"></a>😄😄😄</h1><p><img src="http://upload-images.jianshu.io/upload_images/2331323-337781e6ecaac4ae.gif?imageMogr2/auto-orient/strip" alt="tableView使用效果"></p>
<p> <img src="http://upload-images.jianshu.io/upload_images/2331323-37d81ba5477c72c3.gif?imageMogr2/auto-orient/strip" alt="view使用效果"></p>
<h1 id="注意"><a href="#注意" class="headerlink" title="注意"></a><em>注意</em></h1><h5 id="1-当tableView、collectionView-有数据时（row-gt-0，item-gt-0）不显示占位图"><a href="#1-当tableView、collectionView-有数据时（row-gt-0，item-gt-0）不显示占位图" class="headerlink" title="1.当tableView、collectionView 有数据时（row&gt;0，item&gt;0）不显示占位图"></a>1.当tableView、collectionView 有数据时（row&gt;0，item&gt;0）不显示占位图</h5><h5 id="2-当scrollView-contentSize-height-gt-scrollView-frame-size-height-时临时禁用滑动属性（tableView、collectionView优先遵循第一条）"><a href="#2-当scrollView-contentSize-height-gt-scrollView-frame-size-height-时临时禁用滑动属性（tableView、collectionView优先遵循第一条）" class="headerlink" title="2.当scrollView.contentSize.height &gt; scrollView.frame.size.height 时临时禁用滑动属性（tableView、collectionView优先遵循第一条）"></a>2.当scrollView.contentSize.height &gt; scrollView.frame.size.height 时临时禁用滑动属性（tableView、collectionView优先遵循第一条）</h5><h5 id="3-建议导入demo中的XXXPlaceholderEX文件夹"><a href="#3-建议导入demo中的XXXPlaceholderEX文件夹" class="headerlink" title="3.建议导入demo中的XXXPlaceholderEX文件夹"></a>3.建议导入demo中的XXXPlaceholderEX文件夹</h5><h5 id="4-占位图中的button会自动添加点击事件，无需添加。没有button会给整个占位图添加点击事件"><a href="#4-占位图中的button会自动添加点击事件，无需添加。没有button会给整个占位图添加点击事件" class="headerlink" title="4.占位图中的button会自动添加点击事件，无需添加。没有button会给整个占位图添加点击事件"></a>4.占位图中的button会自动添加点击事件，无需添加。没有button会给整个占位图添加点击事件</h5><h5 id="5-我觉得用法还是挺简单的，看下demo吧😂"><a href="#5-我觉得用法还是挺简单的，看下demo吧😂" class="headerlink" title="5.我觉得用法还是挺简单的，看下demo吧😂"></a>5.我觉得用法还是挺简单的，看下demo吧😂</h5><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pod repo update</span><br><span class="line">rm ~&#x2F;Library&#x2F;Caches&#x2F;CocoaPods&#x2F;search_index.json  (清除搜索缓存)</span><br><span class="line">pod &#39;XXXPlaceholder&#39;, &#39;~&gt; 0.0.1&#39;</span><br></pre></td></tr></table></figure>
<ol>
<li><p>参照demo创建占位图</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;self为tableView</span><br><span class="line">self.xxx_emptyView &#x3D; [XXXPlaceholderView emptyView];</span><br><span class="line">self.xxx_noNetworkView &#x3D; [XXXPlaceholderView noNetworkView];</span><br><span class="line">&#x2F;&#x2F;占位图会自动添加点击事件</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
<li><p>tableView、collectionView 展示占位图调用</p>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;**</span><br><span class="line">刷新数据源 tableView、collectionView专用</span><br><span class="line">*&#x2F;</span><br><span class="line">- (void)xxx_reloadData;</span><br><span class="line"> </span><br><span class="line">&#x2F;**</span><br><span class="line">刷新数据源 tableView、collectionView专用</span><br><span class="line">@param clickBlock 占位图点击事件Block</span><br><span class="line">*&#x2F;</span><br><span class="line">- (void)xxx_reloadDataWithClickBlock:  (nullable   XXXPlaceholderClickBlock)clickBlock;</span><br><span class="line"></span><br><span class="line">[self.tableView xxx_reloadDataWithClickBlock:^&#123;</span><br><span class="line">           &#x2F;&#x2F;这里做再次请求</span><br><span class="line">        &#125;];</span><br></pre></td></tr></table></figure></li>
<li><p>view使用 </p>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"> &#x2F;**</span><br><span class="line"> 展示无数据占位图</span><br><span class="line"> *&#x2F;</span><br><span class="line">- (void)xxx_showEmptyView;</span><br><span class="line"></span><br><span class="line"> &#x2F;**</span><br><span class="line">展示无数据占位图</span><br><span class="line">@param clickBlock 占位图点击事件Block</span><br><span class="line">*&#x2F;</span><br><span class="line">- (void)xxx_showEmptyViewWithClickBlock:(nullable XXXPlaceholderClickBlock)clickBlock;</span><br><span class="line"></span><br><span class="line"> &#x2F;**</span><br><span class="line">展示无网络占位图</span><br><span class="line">*&#x2F;</span><br><span class="line">- (void)xxx_showNoNetWorkView;</span><br><span class="line"></span><br><span class="line"> &#x2F;**</span><br><span class="line">展示无网络占位图</span><br><span class="line">@param clickBlock 占位图点击事件Block</span><br><span class="line">*&#x2F;</span><br><span class="line">- (void)xxx_showNoNetWorkViewWithClickBlock:(nullable XXXPlaceholderClickBlock)clickBlock;</span><br><span class="line"></span><br><span class="line"> &#x2F;**</span><br><span class="line"> 移出所有占位图</span><br><span class="line"> *&#x2F;</span><br><span class="line">- (void)xxx_removePlaceholderView;</span><br><span class="line"> </span><br></pre></td></tr></table></figure>
<h1 id="Github直达"><a href="#Github直达" class="headerlink" title="Github直达"></a><a class="link"   href="https://github.com/xxxIxxxx/XXXPlaceholder" >Github直达<i class="fas fa-external-link-alt"></i></a></h1></li>
</ol>
]]></content>
      <categories>
        <category>iOS</category>
      </categories>
  </entry>
  <entry>
    <title>iOS拖拽卡片</title>
    <url>/2020/12/17/iOS%E6%8B%96%E6%8B%BD%E5%8D%A1%E7%89%87%E5%8F%A0%E5%8A%A0%E5%8D%A1%E7%89%87/</url>
    <content><![CDATA[<h1 id="github-XXXCardStore"><a href="#github-XXXCardStore" class="headerlink" title="github XXXCardStore"></a><a class="link"   href="https://github.com/xxxIxxxx/XXXCardStore" >github XXXCardStore<i class="fas fa-external-link-alt"></i></a></h1><p><img src="http://upload-images.jianshu.io/upload_images/2331323-86f449d502adaa19.gif?imageMogr2/auto-orient/strip" alt="效果图"></p>
<p><img src="http://upload-images.jianshu.io/upload_images/2331323-70de1ba83f9ad822.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="说明图"></p>
<h3 id="导入"><a href="#导入" class="headerlink" title="导入"></a>导入</h3><ol>
<li>pod search XXXCardStore<br>如未搜索到 请执行 pod repo update 进行更新，然后清除搜索缓存 rm ~/Library/Caches/CocoaPods/search_index.json</li>
<li>pod ‘XXXCardStore’</li>
<li>import &lt; XXXCardStore .h&gt;</li>
</ol>
<h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">- (void)viewDidLoad &#123;</span><br><span class="line">    [super viewDidLoad];</span><br><span class="line">XXXCardStore *xxx &#x3D; [XXXCardStore new];</span><br><span class="line">    [self.view addSubview:xxx];</span><br><span class="line">    xxx.frame &#x3D; CGRectMake(50, 100, 300, 200);</span><br><span class="line">    xxx.cardOffset &#x3D; 10.0;</span><br><span class="line">    xxx.isInfiniteLoop &#x3D;YES;</span><br><span class="line">    xxx.delegate &#x3D; self;</span><br><span class="line">    xxx.imgUrlStrArr &#x3D; @[@&quot;http:&#x2F;&#x2F;f.hiphotos.baidu.com&#x2F;image&#x2F;pic&#x2F;item&#x2F;203fb80e7bec54e7c340af43b2389b504fc26a3b.jpg&quot;,</span><br><span class="line">                         @&quot;http:&#x2F;&#x2F;d.hiphotos.baidu.com&#x2F;image&#x2F;pic&#x2F;item&#x2F;0d338744ebf81a4c6231d43ddb2a6059242da6c6.jpg&quot;,</span><br><span class="line">                         @&quot;http:&#x2F;&#x2F;a.hiphotos.baidu.com&#x2F;image&#x2F;pic&#x2F;item&#x2F;4e4a20a4462309f788a28152790e0cf3d6cad6a4.jpg&quot;,</span><br><span class="line">                         @&quot;http:&#x2F;&#x2F;d.hiphotos.baidu.com&#x2F;image&#x2F;pic&#x2F;item&#x2F;810a19d8bc3eb135101902e6ad1ea8d3fc1f4494.jpg&quot;,</span><br><span class="line">                         @&quot;http:&#x2F;&#x2F;f.hiphotos.baidu.com&#x2F;image&#x2F;pic&#x2F;item&#x2F;86d6277f9e2f0708a5559f5de224b899a901f21f.jpg&quot;,</span><br><span class="line">                         @&quot;http:&#x2F;&#x2F;h.hiphotos.baidu.com&#x2F;image&#x2F;pic&#x2F;item&#x2F;ca1349540923dd5441e81235da09b3de9d8248d7.jpg&quot;,</span><br><span class="line">                         @&quot;http:&#x2F;&#x2F;c.hiphotos.baidu.com&#x2F;image&#x2F;pic&#x2F;item&#x2F;faedab64034f78f09d3f2eae72310a55b3191cb2.jpg&quot;,</span><br><span class="line">                         @&quot;http:&#x2F;&#x2F;d.hiphotos.baidu.com&#x2F;image&#x2F;pic&#x2F;item&#x2F;622762d0f703918f037f88975a3d269758eec4c5.jpg&quot;</span><br><span class="line">                         ];</span><br><span class="line">    [xxx reloadData];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (void)tapCard:(NSInteger)index cardStore:(UIView *)xxxCardStore&#123;</span><br><span class="line"></span><br><span class="line">    NSLog(@&quot;--- tap   &#x3D;&#x3D;&#x3D;  %ld&quot;,index);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<h3 id="自定义卡片内容"><a href="#自定义卡片内容" class="headerlink" title="自定义卡片内容"></a>自定义卡片内容</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;**</span><br><span class="line"> 自定义卡片内容</span><br><span class="line"> </span><br><span class="line"> @param customCard 你的customView 内部试图未清除</span><br><span class="line"> @param index 需要准备的 card的 index</span><br><span class="line"> @param xxxCardStore xxxCardStore 主体</span><br><span class="line"> *&#x2F;</span><br><span class="line">- (void)customCardView:(UIView *)customCard index:(NSInteger)index cardStore:(UIView *)xxxCardStore;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>iOS</category>
      </categories>
  </entry>
  <entry>
    <title>iOS mask 遮罩，彩色文本</title>
    <url>/2020/12/17/iOS%E6%B8%90%E5%8F%98%E5%BD%A9%E8%89%B2%E6%96%87%E5%AD%97%E3%80%81iOS-mask-%E9%81%AE%E7%BD%A9/</url>
    <content><![CDATA[<h1 id="iOS渐变彩色文字、iOS-mask-遮罩"><a href="#iOS渐变彩色文字、iOS-mask-遮罩" class="headerlink" title="iOS渐变彩色文字、iOS mask 遮罩"></a>iOS渐变彩色文字、iOS mask 遮罩</h1><p><img src="https://upload-images.jianshu.io/upload_images/2331323-2f3e46c5908444fc.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="效果图"></p>
<p><a class="link"   href="https://github.com/ibireme/YYCategories" >使用到了YYCategories<i class="fas fa-external-link-alt"></i></a></p>
<h3 id="彩色文字"><a href="#彩色文字" class="headerlink" title="彩色文字"></a>彩色文字</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">UIView *colorBgView &#x3D; [UIView new];</span><br><span class="line">    [self.view addSubview:colorBgView];</span><br><span class="line">    colorBgView.frame &#x3D; CGRectMake(0, 300, UIScreen.mainScreen.bounds.size.width, 40);</span><br><span class="line">        </span><br><span class="line">&#x2F;&#x2F;这里用了YYCategories</span><br><span class="line">    UIBezierPath *colorTextPath &#x3D; [UIBezierPath bezierPathWithText:@&quot;哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈&quot; font:[UIFont systemFontOfSize:28]];</span><br><span class="line">    CAShapeLayer *colorTextLayer &#x3D; [CAShapeLayer layer];</span><br><span class="line">    colorTextLayer.path &#x3D; colorTextPath.CGPath;</span><br><span class="line">    colorTextLayer.frame &#x3D; CGRectMake(0, 0, UIScreen.mainScreen.bounds.size.width, 30);</span><br><span class="line">    colorBgView.layer.mask &#x3D; colorTextLayer;</span><br><span class="line">    </span><br><span class="line">    CAGradientLayer *colorLayer &#x3D; CAGradientLayer.new;</span><br><span class="line">    colorLayer.colors &#x3D; @[(__bridge id)UIColor.redColor.CGColor,</span><br><span class="line">                          (__bridge id)UIColor.orangeColor.CGColor,</span><br><span class="line">                          (__bridge id)UIColor.greenColor.CGColor,</span><br><span class="line">                          (__bridge id)UIColor.blueColor.CGColor,</span><br><span class="line">                          (__bridge id)UIColor.yellowColor.CGColor,</span><br><span class="line">                          (__bridge id)UIColor.purpleColor.CGColor,</span><br><span class="line">                          (__bridge id)UIColor.blackColor.CGColor,];</span><br><span class="line">    colorLayer.startPoint &#x3D; CGPointMake(0, 0.5);</span><br><span class="line">    colorLayer.endPoint &#x3D; CGPointMake(1, 0.5);</span><br><span class="line">    colorLayer.frame &#x3D; CGRectMake(0, 0, UIScreen.mainScreen.bounds.size.width, 40);</span><br><span class="line">    [colorBgView.layer addSublayer:colorLayer];</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="过渡遮罩"><a href="#过渡遮罩" class="headerlink" title="过渡遮罩"></a>过渡遮罩</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"> &#x2F;&#x2F;&#x2F;黑色背景view</span><br><span class="line">    UIView *indicatorView &#x3D; [UIView new];</span><br><span class="line">    [self.view addSubview:indicatorView];</span><br><span class="line">    indicatorView.backgroundColor &#x3D; UIColor.blackColor;</span><br><span class="line">    indicatorView.layer.cornerRadius &#x3D; 20;</span><br><span class="line">    indicatorView.layer.masksToBounds &#x3D; YES;</span><br><span class="line">    indicatorView.frame &#x3D; CGRectMake(0, 195, 100, 40);</span><br><span class="line">    self.indicatorView &#x3D; indicatorView;</span><br><span class="line">    </span><br><span class="line">  &#x2F;&#x2F;这里用了YYCategories</span><br><span class="line">    UIBezierPath *textPath &#x3D; [UIBezierPath bezierPathWithText:@&quot;哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈&quot; font:[UIFont systemFontOfSize:28]];</span><br><span class="line">    CAShapeLayer *textLayer &#x3D; [CAShapeLayer layer];</span><br><span class="line">    textLayer.path &#x3D; textPath.CGPath;</span><br><span class="line">    textLayer.frame &#x3D; CGRectMake(0, 0, UIScreen.mainScreen.bounds.size.width, 30);</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    UIView *darkView &#x3D; [UIView new];</span><br><span class="line">    [self.view addSubview:darkView];</span><br><span class="line">    darkView.backgroundColor &#x3D; UIColor.darkGrayColor;</span><br><span class="line">    darkView.frame &#x3D; CGRectMake(0, 200, UIScreen.mainScreen.bounds.size.width, 30);</span><br><span class="line">    darkView.layer.mask &#x3D; textLayer;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    UIView *whiteView &#x3D; [UIView new];</span><br><span class="line">    [darkView addSubview:whiteView];</span><br><span class="line">    whiteView.backgroundColor &#x3D; UIColor.whiteColor;</span><br><span class="line">    whiteView.layer.cornerRadius &#x3D; 20;</span><br><span class="line">    whiteView.layer.masksToBounds &#x3D; YES;</span><br><span class="line">    whiteView.frame &#x3D; CGRectMake(0, -5, 100, 40);</span><br><span class="line">    self.whiteView &#x3D; whiteView;</span><br><span class="line">    </span><br><span class="line">    &#x2F;&#x2F;也可以使用layer</span><br><span class="line">&#x2F;&#x2F;    CALayer *darkLayer &#x3D; CALayer.new;</span><br><span class="line">&#x2F;&#x2F;    [self.view.layer addSublayer:darkLayer];</span><br><span class="line">&#x2F;&#x2F;    darkLayer.backgroundColor &#x3D; UIColor.darkGrayColor.CGColor;</span><br><span class="line">&#x2F;&#x2F;    darkLayer.frame &#x3D; CGRectMake(0, 200, UIScreen.mainScreen.bounds.size.width, 30);</span><br><span class="line">&#x2F;&#x2F;    darkLayer.mask &#x3D; textLayer;</span><br><span class="line">&#x2F;&#x2F;</span><br><span class="line">&#x2F;&#x2F;    CAShapeLayer *whiteLayer &#x3D; CAShapeLayer.new;</span><br><span class="line">&#x2F;&#x2F;    [darkLayer addSublayer:whiteLayer];</span><br><span class="line">&#x2F;&#x2F;    whiteLayer.backgroundColor &#x3D; UIColor.whiteColor.CGColor;</span><br><span class="line">&#x2F;&#x2F;    whiteLayer.fillColor &#x3D; UIColor.whiteColor.CGColor;</span><br><span class="line">&#x2F;&#x2F;    whiteLayer.strokeColor &#x3D; UIColor.whiteColor.CGColor;</span><br><span class="line">&#x2F;&#x2F;    whiteLayer.borderColor &#x3D; UIColor.whiteColor.CGColor;</span><br><span class="line">&#x2F;&#x2F;    whiteLayer.cornerRadius &#x3D; 20;</span><br><span class="line">&#x2F;&#x2F;    whiteLayer.masksToBounds &#x3D; YES;</span><br><span class="line">&#x2F;&#x2F;    whiteLayer.frame &#x3D; CGRectMake(0, -5, 100, 40);</span><br><span class="line">&#x2F;&#x2F;    self.whiteLayer &#x3D; whiteLayer;</span><br><span class="line">    </span><br><span class="line">    UISlider *slider &#x3D; UISlider.new;</span><br><span class="line">    [self.view addSubview:slider];</span><br><span class="line">    [slider addTarget:self action:@selector(changeFrame:) forControlEvents:UIControlEventValueChanged];</span><br><span class="line">    slider.frame &#x3D; CGRectMake(0, 260, UIScreen.mainScreen.bounds.size.width, 30);</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">----------</span><br><span class="line"></span><br><span class="line">- (void)changeFrame:(UISlider *)slider &#123;</span><br><span class="line"> </span><br><span class="line">    CGFloat x &#x3D; UIScreen.mainScreen.bounds.size.width *slider.value;</span><br><span class="line">    self.indicatorView.frame &#x3D; CGRectMake(x, 195, 100, 40);</span><br><span class="line">    self.whiteView.frame &#x3D; CGRectMake(x, -5, 100, 40);</span><br><span class="line">    self.whiteLayer.frame &#x3D; CGRectMake(x, -5, 100, 40);</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>iOS</category>
      </categories>
  </entry>
  <entry>
    <title>在Swift中使用 NSClassFromString</title>
    <url>/2020/12/17/%E5%9C%A8Swift%E4%B8%AD%E4%BD%BF%E7%94%A8-NSClassFromString/</url>
    <content><![CDATA[<p>在Swift中使用 NSClassFromString</p>
<p>需要 <code>工程名</code> + <code> .</code>  +  <code>string</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">NSClassFromString(Bundle.main.object(forInfoDictionaryKey: &quot;CFBundleName&quot;)! + &quot;.&quot; + &quot;CustomCell&quot;)</span><br></pre></td></tr></table></figure>

<h3 id="每次写这些很麻烦-所以简单封装下"><a href="#每次写这些很麻烦-所以简单封装下" class="headerlink" title="每次写这些很麻烦,所以简单封装下"></a>每次写这些很麻烦,所以简单封装下</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public func GetClassFromString(_ classString: String) -&gt; AnyClass? &#123;</span><br><span class="line">    </span><br><span class="line">    guard let bundleName: String &#x3D; Bundle.main.object(forInfoDictionaryKey: &quot;CFBundleName&quot;) as? String else &#123;</span><br><span class="line">        return nil</span><br><span class="line">    &#125;</span><br><span class="line">        </span><br><span class="line">    var anyClass: AnyClass? &#x3D; NSClassFromString(bundleName + &quot;.&quot; + classString)</span><br><span class="line">    if (anyClass &#x3D;&#x3D; nil) &#123;</span><br><span class="line">        anyClass &#x3D; NSClassFromString(classString)</span><br><span class="line">    &#125;</span><br><span class="line">    return anyClass</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="以后就可以直接调用"><a href="#以后就可以直接调用" class="headerlink" title="以后就可以直接调用"></a>以后就可以直接调用</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">GetClassFromString(&quot;cellName&quot;)</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Swift</category>
      </categories>
  </entry>
</search>
